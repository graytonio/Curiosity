<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Tom Schindl: e(fx)clipse runtime library – Working with the (JavaFX) UI-Thread</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5012</guid>
	<link>https://tomsondev.bestsolution.at/2017/03/23/efxclipse-runtime-library-working-with-the-javafx-ui-thread/</link>
	<description>&lt;p&gt;When developing UI-Application a very frequent task is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to synchronizes yourself back from an worker-thread to the UI-Thread&lt;/li&gt;
&lt;li&gt;schedule task to run in the future&lt;/li&gt;
&lt;li&gt;Block the program flow and wait for a condition being met (in SWT called spinning the event loop)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaFX 8 has a public API for most of those building blocks (only exception is Event-Loop-Spinning who was an internal API in Java8 and is public API in 9) but using higher level API reduces the boilerplate code you need to implement.&lt;/p&gt;
&lt;p&gt;Before we start let’s see how you can access to it in your maven-driven projects (I’m not gradle safey enough to show how it works there) you need to &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add the &lt;a href=&quot;http://maven.bestsolution.at/&quot;&gt;efxclipse&lt;/a&gt; maven repository (at the time of this writing you need to nightly repository because you need at least 3.0.0)&lt;/li&gt;
&lt;li&gt;add the following dependency
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;at.bestsolution.efxclipse.rt&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;org.eclipse.fx.ui.controls&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;3.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s take a look at some of those APIs and how they can help you write better code:&lt;/p&gt;
&lt;h2&gt;Writing back from worker thread&lt;/h2&gt;
&lt;p&gt;Let’s suppose we have a service who returns a search result as a &lt;code&gt;CompletableFuture&lt;/code&gt; and we want to push the result – once available – to JavaFX ObjectProperty:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;import org.eclipse.fx.core.ServiceUtils;

// Lookup the domain service in the service registry
PersonSearchService service = 
  ServiceUtils.getService(PersonSearchService.class);

ObjectProperty&amp;lt;Person&amp;gt; person = ...;

CompletableFuture&amp;lt;Person&amp;gt; result = 
  service.findByName(&quot;Tom&quot;,&quot;Schindl&quot;);
&lt;/pre&gt;
&lt;p&gt;Let’s for a second suppose we can interact with our UI-Toolkit on ANY-Thread we could simply write:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;result.thenAccept( person::set );
&lt;/pre&gt;
&lt;p&gt;Unfortunately none of the UI-Toolkits I know would support this because they require you to sync on a special thread called the UI-Thread. JavaFX is not different in this aspect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plain JavaFX APIs:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;result.thenAccept( p -&amp;gt; {
   Platform.runLater( () -&amp;gt;
     person.set(p);
   );
} );
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Using e(fx)clipse’ &lt;code&gt;ThreadSynchronize#asyncExec(T,Consumer&amp;lt;T&amp;gt;)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;import org.eclipse.fx.core.ThreadSynchronize;

// ...

// Lookup the thready service in the service registry
ThreadSynchronize threadSync = 
  ServiceUtils.getService(ThreadSynchronize.class).get();

result.thenAccept( p -&amp;gt; {
   threadSync.asyncExec( p, person::set );
});
&lt;/pre&gt;
&lt;p&gt;We got rid of the inner lambda and replaced it with a method reference, so the code got more readable but&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using e(fx)clipse’ &lt;code&gt;ThreadSynchronize#wrap(Consumer&amp;lt;T&amp;gt;)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;// ...
result.thenAccept( threadSync.wrap(person::set) );
&lt;/pre&gt;
&lt;p&gt;we can get rid of all outer lambda as well and are back to fairly the same code as if we’d not had to worry about thread-synchronization at all.&lt;/p&gt;
&lt;h2&gt;Reading from a worker thread&lt;/h2&gt;
&lt;p&gt;Let’s suppose you have a Timer running who wants to read a JavaFX-Property from a TextField in 1 second from now you’d:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You’d better rewrite it to use a Timeline so that no thread sync is needed&lt;/li&gt;
&lt;li&gt;You’d write the following magic lines of code:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;TextField textField = ...

Timer t = new Timer();
t.schedule( new TimerTask() {
  @Override
  public void run() {
    CountDownLatch ll = new CountDownLatch(1);
    AtomicReference&amp;lt;String&amp;gt; data = new AtomicReference&amp;lt;&amp;gt;();
    Platform.runLater( () -&amp;gt; {
      data.set( textField.getText() );
      ll.countDown();
    });
    ll.await();
    String d = data.get();
    // further process the data 
  }
}, 1000 );
&lt;/pre&gt;
&lt;p&gt;Let’s for a moment forget that this code fairly dangerous because it might create a dead lock situation (hence JavaFX only provides &lt;code&gt;Platform.runLater(Runnable)&lt;/code&gt;) this is a huge amount of code to write! Let’s see what APIs e(fx)clipse has to improve the situation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#syncExec(Runnable)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;ThreadSynchronize threadSync = 
  ServiceUtils.getService(ThreadSynchronize.class).get();

public void run() {
  AtomicReference&amp;lt;String&amp;gt; data = new AtomicReference&amp;lt;&amp;gt;();
  threadSync.syncExec( () -&amp;gt; {
    data.set( textField.getText() );
  } );
  String d = data.get();
  // further process the data 
}
&lt;/pre&gt;
&lt;p&gt;Removes the need for the &lt;code&gt;CountDownLatch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#syncExec(Callable&amp;lt;V&amp;gt;, V)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;public void run() {
  String d = threadSync.syncExec( textField::getText, &quot;&quot; );
}
&lt;/pre&gt;
&lt;p&gt;Removes the need for the &lt;code&gt;AtomicReference&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#scheduleExecution(long, Runnable)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;ExecutorService s = ...;
threadSync.scheduleExecution( 1000, () -&amp;gt; {
   String data = textField.getText();
   s.submit( () -&amp;gt; ... );
} );
&lt;/pre&gt;
&lt;p&gt;Removes the thread synchronization problems arising from &lt;code&gt;Platform.runLater()&lt;/code&gt; call&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;ThreadSynchronize#scheduleExecution(long, Callable&amp;lt;T&amp;gt;) : CompletableFuture&amp;lt;T&amp;gt; &lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;threadSync.scheduleExecution( 1000, textField::getText )
  .thenAcceptAsync( d -&amp;gt; ... );
&lt;/pre&gt;
&lt;p&gt;Removes the lambda and gets you to the wonderful &lt;code&gt;CompletableFuture&lt;/code&gt;-API.&lt;/p&gt;
&lt;h2&gt;Block program flow&lt;/h2&gt;
&lt;p&gt;Generally speaking halting the program flow is a discouraged software pattern and you’d better work with &lt;code&gt;Future&lt;/code&gt; and callbacks like &lt;code&gt;Consumer&lt;/code&gt; but there might be (existing) API you have to support who requires you to halt the program flow and continue after a certain condition has been met.&lt;/p&gt;
&lt;p&gt;To support such a usecase e(fx)clipse has &lt;code&gt;org.eclipse.fx.ui.controls.Util#waitUntil( BlockCondition blockCondition )&lt;/code&gt; you can use like this&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;Pane p = ...;

// Ask for name in an overlay
String askForName() {
  BlockCondition&amp;lt;String&amp;gt; condition = new BlockCondition&amp;lt;&amp;gt;();

  TextField t = new TextField();
  Button b = new Button(&quot;Proceed&quot;);
  b.setOnAction( e -&amp;gt; { condition.release(t.getText()); } );
  HBox box = new HBox(
    new Label(&quot;Name:&quot;),
    t,
    b);
  box.setManaged(false);
  box.autosize();
  box.relocate( 
    p.getWidth() / 2 - box.getWidth() / 2, 
    p.getHeight() / 2 - box.getHeight() / 2 );
  p.getChildren().add( box );
  return Util.waitUntil( condition );
}
&lt;/pre&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/tomsondev.wordpress.com/5012/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tomsondev.wordpress.com/5012/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=tomsondev.bestsolution.at&amp;amp;blog=7995503&amp;amp;post=5012&amp;amp;subd=tomsondev&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 23 Mar 2017 13:08:16 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Internet of all the Things</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/cjjrutQ1upQ/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/cjjrutQ1upQ/</link>
	<description>The articles feature Eclipse IoT projects including, Eclipse Hono, Eclipse ioFog, Eclipse Kapua, and Eclipse Vorto.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/cjjrutQ1upQ&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 23 Mar 2017 12:30:00 +0000</pubDate>
</item>
<item>
	<title>Orion: Orion 14.0 New and Noteworthy</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=879</guid>
	<link>http://planetorion.org/news/2017/03/orion-14-0-new-and-noteworthy/</link>
	<description>&lt;p&gt;Another three months and &lt;a href=&quot;http://planetorion.org/news/2017/03/announcing-orion-14/&quot;&gt;another awesome release&lt;/a&gt;! Its that time again where I share all of the cool new features, enhancements and fixes with you. As usual with every release, there were lots of changes, so lets jump right in.&lt;/p&gt;
&lt;h2&gt;Accessibility&lt;/h2&gt;
&lt;p&gt;The work that began in 13.0 to make Orion completely accessible to every developer continued at a furious pace in 14. This time around, our work was focussed on having the correct colour contrast.&lt;/p&gt;
&lt;p&gt;We tightened up our colours in the light theme so that all colours pass the &lt;a href=&quot;https://www.w3.org/TR/WCAG20/#guidelines&quot;&gt;WCAG 2.0 AA guideline&lt;/a&gt; for colour contrast. The changes are subtle, but they do make text easier to read, as seen in this before-and-after snapshot of selected code in the editor.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_880&quot; style=&quot;width: 565px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/compare-selected-colors.png&quot;&gt;&lt;img alt=&quot;Selected text comparison&quot; class=&quot; wp-image-880&quot; height=&quot;317&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/compare-selected-colors.png&quot; width=&quot;555&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Comparing selected text in 14.0 vs. 13.0&lt;/p&gt;&lt;/div&gt;
&lt;h2&gt;Language Tools&lt;/h2&gt;
&lt;h3&gt;Automatic Project Configuration&lt;/h3&gt;
&lt;p&gt;The JavaScript tooling can now read and understand complex project configurations and automatically configure Tern for the best development experience. For example, the tools can better read and understand package.json files and automatically load available plugins into Tern (rather than the user having to tailor their configuration settings).&lt;/p&gt;
&lt;h3&gt;Projects Anywhere&lt;/h3&gt;
&lt;p&gt;Using the new support from the platform to find project contexts, the JavaScript tools can now support a “project” at any level in the navigator. Where a project means any folder that contains JavaScript project-like files – package.json, .tern-project, etc.&lt;/p&gt;
&lt;h3&gt;Smarter Defaults&lt;/h3&gt;
&lt;p&gt;The default configuration for the JavaScript tools has been retooled to provide more support right out of the box. In Orion 13.0 (and before), we started the tools in a very bare-bone fashion, and would alert you about potential configuration changes (with quick fixes). Now we automatically start with ECMA, node and browser support, and configure your project as you code.&lt;/p&gt;
&lt;h3&gt;Disable Linting In-File&lt;/h3&gt;
&lt;p&gt;Tired of being nagged about a particular code pattern used in certain places (but like to be warned elsewhere)? You can now use the new quickfix to ignore the problem in the current file.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_884&quot; style=&quot;width: 342px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/disable-in-file.png&quot;&gt;&lt;img alt=&quot;Disable rule in-file&quot; class=&quot; wp-image-884&quot; height=&quot;183&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/disable-in-file.png&quot; width=&quot;332&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Disable rule in-file&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;JavaScript Type Icons&lt;/h3&gt;
&lt;p&gt;In an effort to make the overload of information (while coding in JavaScript) a bit more understandable, we have added icons to help users immediately understand the type of something. For example, &lt;strong&gt;F&lt;/strong&gt; stands for &lt;em&gt;function&lt;/em&gt;, &lt;strong&gt;O&lt;/strong&gt; is for &lt;em&gt;objects&lt;/em&gt;, &lt;strong&gt;C&lt;/strong&gt; is for &lt;em&gt;classes&lt;/em&gt;, etc.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_885&quot; style=&quot;width: 499px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/js-tools-icons.png&quot;&gt;&lt;img alt=&quot;Type icons&quot; class=&quot; wp-image-885&quot; height=&quot;356&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/js-tools-icons-1024x745.png&quot; width=&quot;489&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Type icons&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Improved ESLint configuration file support&lt;/h3&gt;
&lt;p&gt;We have improved how the JavaScript tools handle the various forms of ESLint configuration files. We now properly support all entries of the files (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=493824&quot;&gt;except for extends&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;SVG Support&lt;/h3&gt;
&lt;p&gt;The CSS and HTML parsers have been updated to properly support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt; attributes and properties. The HTML and CSS validation has also been updated to properly process the new attributes and properties.&lt;/p&gt;
&lt;h2&gt;Platform Improvements&lt;/h2&gt;
&lt;h3&gt;Syntax Styling&lt;/h3&gt;
&lt;p&gt;Syntax styling grammars can now define a &lt;strong&gt;firstLineMatch&lt;/strong&gt; attribute.  This enables multiple grammars to be defined for a content type, and the grammar that gets applied will be chosen based on the first line of content.&lt;/p&gt;
&lt;h3&gt;Tasks&lt;/h3&gt;
&lt;p&gt;The node server now stores its tasks metadata in a Mongo DB when running as multi-tenant.  As a result, requests querying long-running tasks can now be handled by different server instances that have access to the shared Mongo DB.&lt;/p&gt;
&lt;h3&gt;Automatic Syntax Checking&lt;/h3&gt;
&lt;p&gt;Previously, syntax checking took place when a file is saved – if you have autosave turned on in Orion, this is not a problem, as problem markers would be updated as you made changes. If however, you had autosave turned off, any problem markers would quickly become stale causing confusion. Now, in Orion 14, syntax checking will take place on a regular interval even if autosave is turned off, to try and avoid stale problem markers piling up.&lt;/p&gt;
&lt;h3&gt;New File Client API&lt;/h3&gt;
&lt;p&gt;The Orion file client has been updated with the ability to find a project given a particular resource path. The new API can be invoked as:&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;strong&gt;fileClient.getProject(resourcePath, options)&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Information Annotations&lt;/h3&gt;
&lt;p&gt;A new type of annotation has been added to Orion – the &lt;strong&gt;info&lt;/strong&gt; annotation.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_881&quot; style=&quot;width: 494px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.50.40-PM.png&quot;&gt;&lt;img alt=&quot;The info annotation&quot; class=&quot; wp-image-881&quot; height=&quot;88&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.50.40-PM.png&quot; width=&quot;484&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The “info” annotation&lt;/p&gt;&lt;/div&gt;
&lt;h3&gt;Annotation Visibility&lt;/h3&gt;
&lt;p&gt;Always wanted to only show annotations in certain parts of the IDE? Well, now you can.&lt;/p&gt;
&lt;p&gt;Simply navigate to the editor settings preference page, and look for the &lt;strong&gt;Annotations&lt;/strong&gt;, &lt;strong&gt;Overview Annotations&lt;/strong&gt; and &lt;strong&gt;Text Annotations&lt;/strong&gt; sections to configure annotation visibility as you’d like.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_882&quot; style=&quot;width: 506px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.57.43-PM.png&quot;&gt;&lt;img alt=&quot;Annotation visibilities&quot; class=&quot; wp-image-882&quot; height=&quot;373&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/Screen-Shot-2017-03-20-at-2.57.43-PM-1024x770.png&quot; width=&quot;496&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Annotation visibilities&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Don’t forget, you can also use the handy star buttons to have the preference(s) show up in the quick preference menu.&lt;/p&gt;
&lt;h3&gt;IDE Themes&lt;/h3&gt;
&lt;p&gt;Finally, after all this time, we have the ability to change the theme of not just the editor, but the entire IDE from the preferences!&lt;/p&gt;
&lt;p&gt;Not happy with the default theme in Orion? Head over to the &lt;strong&gt;IDE Theme&lt;/strong&gt; preferences page to change to another theme (currently there are only two of them) or create your own (by modifying an existing theme and saving it as your own).&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_883&quot; style=&quot;width: 499px;&quot;&gt;&lt;a href=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/theme-settings.png&quot;&gt;&lt;img alt=&quot;IDE Theme preferences&quot; class=&quot; wp-image-883&quot; height=&quot;361&quot; src=&quot;http://planetorion.org/news/wp-content/uploads/2017/03/theme-settings-1024x756.png&quot; width=&quot;489&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;IDE Theme preferences&lt;/p&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 21 Mar 2017 19:46:58 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Open IoT Challenge 3.0 — Winners</title>
	<guid isPermaLink="false">https://medium.com/p/88fe75db263c</guid>
	<link>https://medium.com/@roxanne.iot/open-iot-challenge-3-0-winners-88fe75db263c?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;In case you missed the Eclipse IoT announcement last week, the &lt;a href=&quot;http://iot.eclipse.org/open-iot-challenge/&quot;&gt;Open IoT Challenge 3.0 winners&lt;/a&gt; were announced!&lt;/p&gt;&lt;h3&gt;And the winners are…&lt;/h3&gt;&lt;figure&gt;&lt;a href=&quot;http://iot.eclipse.org/open-iot-challenge/&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/750/1*GrTXE-OQ_fL4HYDOEjhD-w.png&quot; /&gt;&lt;/a&gt;Open IoT Challenge 3.0 Winners&lt;/figure&gt;&lt;p&gt;Congratulations to the &lt;a href=&quot;https://medium.com/inmoodforlife/in-the-mood-for-life-open-iot-challenge-final-report-a0c19482118c#.fgxnwhxqc&quot;&gt;InMoodForLife&lt;/a&gt; team for coming in first. Their solution analyzes and monitors the sleep patterns of individuals affected by bipolar disorder. The goal of the solution is to improve the therapeutic approach, react, and adapt the treatment faster. The team already shared part of their future plans with us and it sounds very promising! We hope they will go on to help many individuals suffering from bipolar disorder.&lt;/p&gt;&lt;p&gt;The krishi IoT and RHDS teams also worked very hard and delivered great solutions. &lt;a href=&quot;https://www.eclipse.org/org/press-release/openiotchallenge3_winners.php&quot;&gt;Read the full announcement&lt;/a&gt; to find out more.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*V7gJkIKmcuE7zepATG943A.png&quot; /&gt;Open IoT Challenge 3.0 Sponsors&lt;/figure&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=88fe75db263c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 20 Mar 2017 10:07:55 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Scala is here</title>
	<guid isPermaLink="true">http://vertx.io/blog/scala-is-here</guid>
	<link>http://vertx.io/blog/scala-is-here</link>
	<description>&lt;article&gt;&lt;h2 id=&quot;tl-dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scala support for Vert.x is here!&lt;/li&gt;
&lt;li&gt;It is based on Scala 2.12, no support for 2.11 planned&lt;/li&gt;
&lt;li&gt;all Vert.x-modules are available in a Scala flavor&lt;/li&gt;
&lt;li&gt;It’s awesome&lt;/li&gt;
&lt;li&gt;Get started &lt;a href=&quot;https://github.com/vert-x3/vertx-sbt-starter&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;The rise of &lt;a href=&quot;http://scala-lang.org/&quot;&gt;Scala&lt;/a&gt; as one of the most important languages on the JVM caught many (me included) by surprise. This hybrid of functional and imperative paradigms struck a chord with many developers. Thanks to Scala a lot of people who’d never have touched a language like Haskell got exposed to functional programming. This exposure was one of the driving forces to get streams and lambda into the JVM.&lt;/p&gt;
&lt;p&gt;With the release of Vert.x 3.4.0 we finally introduced Scala to the family of supported languages: &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala&quot;&gt;vertx-lang-scala&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I will introduce the new stack and how the power of Scala can be used in your favorite reactive toolkit.&lt;/p&gt;
&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;
&lt;p&gt;vertx-lang-scala is based on Scala 2.12. There are no plans to support 2.11.&lt;/p&gt;
&lt;p&gt;All modules available for Vert.x are supported (you can check  &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/tree/master/vertx-lang-scala-stack&quot;&gt;here&lt;/a&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Future and Promise both need a ExecutionContext &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; Modules use the following naming-scheme: &lt;em&gt;io.vertx:-scala_2.12:&lt;/em&gt;. The Scala version of &lt;em&gt;io.vertx:vert-web:3.4.0&lt;/em&gt; would be &lt;em&gt;io.vertx:vertx-web-scala_2.12:3.4.0&lt;/em&gt;.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;There is an sbt-based &lt;a href=&quot;https://github.com/vert-x3/vertx-sbt-starter&quot;&gt;quickstart-project&lt;/a&gt; available that will be updated for each Vert.x-release.&lt;/p&gt;
&lt;p&gt;Please note: Although &lt;a href=&quot;http://www.scala-sbt.org/&quot;&gt;sbt&lt;/a&gt; is used in this quickstart it is by no means required. There are no special plugins involved so vertx-lang-scala can easily be used with &lt;a href=&quot;https://docs.gradle.org/current/userguide/scala_plugin.html&quot;&gt;Gradle&lt;/a&gt; or &lt;a href=&quot;https://github.com/davidB/scala-maven-plugin&quot;&gt;Maven&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use sbt as it is the default build system used for Scala projects.&lt;/p&gt;
&lt;h2 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;Let’s get started by cloning the quickstart:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git clone git@github.com:vert-x3/vertx-sbt-starter.git&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You just got the following things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An sbt project containing dependencies to Vert.x-core and Vert.x-web&lt;/li&gt;
&lt;li&gt;The ability to create a fat-jat via &lt;code&gt;sbt assembly&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The ability to create a docker container via &lt;code&gt;sbt docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A few example verticles&lt;/li&gt;
&lt;li&gt;Unit test examples&lt;/li&gt;
&lt;li&gt;a pre-configured Scala-shell inside sbt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will now run the application to get some quick satisfaction. Use &lt;code&gt;sbt assembly&lt;/code&gt; to produce the fat-jar followed by &lt;code&gt;java -jar target/scala-2.12/vertx-scala-sbt-assembly-0.1-SNAPSHOT.jar&lt;/code&gt;. Now point your browser to &lt;a href=&quot;http://localhost:8666/hello&quot;&gt;http://localhost:8666/hello&lt;/a&gt; for a classic welcome message.&lt;/p&gt;
&lt;h2 id=&quot;the-details&quot;&gt;The details&lt;/h2&gt;
&lt;p&gt;Open your IDE so we can take a look at what’s going on under the hood. We start with the &lt;em&gt;HttpVerticle&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.sbt

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.lang.scala.&lt;span class=&quot;hljs-type&quot;&gt;ScalaVerticle&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.scala.ext.web.&lt;span class=&quot;hljs-type&quot;&gt;Router&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpVerticle&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;ScalaVerticle&lt;/span&gt; {&lt;/span&gt; &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;hljs-keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;startFuture&lt;/span&gt;(&lt;/span&gt;): &lt;span class=&quot;hljs-type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;Unit&lt;/span&gt;] = { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;router&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Router&lt;/span&gt;.router(vertx) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;route&lt;/span&gt; =&lt;/span&gt; router
      .get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;)
        .handler(_.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;))

    vertx &lt;span class=&quot;hljs-comment&quot;&gt;//&amp;lt;4&amp;gt;&lt;/span&gt;
      .createHttpServer()
      .requestHandler(router.accept)
      .listenFuture(&lt;span class=&quot;hljs-number&quot;&gt;8666&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;)  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;5&amp;gt;&lt;/span&gt;
        .map(_ =&amp;gt; ()) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;6&amp;gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;ScalaVerticle&lt;/em&gt; is the base class for all Scala-Verticles. It provides all required methods to integrate with the Vert.x-runtime.&lt;/li&gt;
&lt;li&gt;There are two ways to start a Verticle. Overriding &lt;em&gt;startFuture&lt;/em&gt;, like in this example, tells Vert.x to only consider the Verticle fully started after the returned &lt;em&gt;Future[Unit]&lt;/em&gt; has been successfully completed. Alternatively one can override &lt;em&gt;start&lt;/em&gt; and by that signal to Vert.x the instant availability of the Verticle.&lt;/li&gt;
&lt;li&gt;This block creates a &lt;em&gt;Router&lt;/em&gt; for incoming HTTP-requests. It registers a handler to answer with “world” if a request to the URL “/hello” arrives. The class is coming from the &lt;a href=&quot;http://vertx.io/docs/vertx-web/scala/&quot;&gt;Vert.x-web-module&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Every Verticle has access to the Vert.x-instance. Here we use it to create a webserver and register our router to handle incoming requests.&lt;/li&gt;
&lt;li&gt;We finally reached the reason why I use &lt;em&gt;startFuture&lt;/em&gt; in the first place. All operations in Vert.x are asynchronous. So starting the webserver most definitely means it takes some more time until it bound to the given port (8666 in this case). That’s why &lt;em&gt;listenFuture&lt;/em&gt; is used, which returns a &lt;em&gt;Future&lt;/em&gt; which in turn contains the actual instance of the webserver that just got started. So our Verticle will be ready to receive requests &lt;em&gt;after&lt;/em&gt; the returned &lt;em&gt;Future&lt;/em&gt; has been completed.&lt;/li&gt;
&lt;li&gt;In most cases we can return the &lt;em&gt;Future&lt;/em&gt; directly. In this case the &lt;em&gt;Future&lt;/em&gt; returned by &lt;em&gt;listenFuture&lt;/em&gt; has the wrong type. We get a &lt;em&gt;Future[HttpServer]&lt;/em&gt; but we need a &lt;em&gt;Future[Unit]&lt;/em&gt; as you can see in the signature of &lt;em&gt;startFuture&lt;/em&gt;. This call takes care of mapping the given &lt;em&gt;Future[HttpServer]&lt;/em&gt; to the required return type.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.scalatest.org/&quot;&gt;ScalaTest&lt;/a&gt; for all my testing needs. It comes with stellar support for asynchronous operations and is a perfect fit for testing Vert.x-applications.&lt;/p&gt;
&lt;p&gt;The following &lt;em&gt;HttpVerticleSpec&lt;/em&gt; shows how to test an HTTP-API using only Vert.x-classes. Personally I prefer &lt;a href=&quot;http://rest-assured.io/&quot;&gt;REST-assured&lt;/a&gt; with its rich DSL. For this post I wanted to stick with Vert.x-API, so here we go.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; io.vertx.scala.sbt

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; org.scalatest.&lt;span class=&quot;hljs-type&quot;&gt;Matchers&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; scala.concurrent.&lt;span class=&quot;hljs-type&quot;&gt;Promise&lt;/span&gt;

&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpVerticleSpec&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;VerticleTesting&lt;/span&gt;[&lt;/span&gt;&lt;span class=&quot;hljs-type&quot;&gt;HttpVerticle&lt;/span&gt;] &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Matchers&lt;/span&gt; { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;hljs-string&quot;&gt;&quot;HttpVerticle&quot;&lt;/span&gt; should &lt;span class=&quot;hljs-string&quot;&gt;&quot;bind to 8666 and answer with 'world'&quot;&lt;/span&gt; in { &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;promise&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Promise&lt;/span&gt;[&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;

    vertx.createHttpClient()  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;4&amp;gt;&lt;/span&gt;
      .getNow(&lt;span class=&quot;hljs-number&quot;&gt;8666&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;,
        r =&amp;gt; {
          r.exceptionHandler(promise.failure)
          r.bodyHandler(b =&amp;gt; promise.success(b.toString))
        })

    promise.future.map(res =&amp;gt; res should equal(&lt;span class=&quot;hljs-string&quot;&gt;&quot;world&quot;&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;5&amp;gt;&lt;/span&gt;
  }

}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;VerticleTesting&lt;/em&gt; is a base class for your tests included with the quickstart-project. It’s a small helper that takes care of deploying/un-deploying the Verticle to be tested and manages a Vert.x-instance. It additionally extends &lt;a href=&quot;http://www.scalatest.org/user_guide/async_testing&quot;&gt;AsyncFlatSpec&lt;/a&gt; so we can use Futures as test-return-types.&lt;/li&gt;
&lt;li&gt;Isn’t it nice and readable?&lt;/li&gt;
&lt;li&gt;The promise is required as the whole test will run async&lt;/li&gt;
&lt;li&gt;We use the vertx-instance provided by &lt;em&gt;VerticleTesting&lt;/em&gt; to create a Netty-based HttpClient. We instruct the client to call the specified URL and to succeed the &lt;em&gt;Promise&lt;/em&gt; with the returned body.&lt;/li&gt;
&lt;li&gt;This creates the actual assertion. After getting the &lt;em&gt;Future&lt;/em&gt; from the &lt;em&gt;Promise&lt;/em&gt; an assertion is created: &lt;em&gt;The Result should be equal to the String “world”&lt;/em&gt;. ScalaTest takes care of evaluating the returned &lt;em&gt;Future&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s all you need to get started!&lt;/p&gt;
&lt;h2 id=&quot;futures-in-vertx-lang-scala&quot;&gt;Futures in vertx-lang-scala&lt;/h2&gt;
&lt;p&gt;Now for a more in depth topic I think is worth mentioning. vertx-lang-scala treats async operations the Scala-way which is a little different from what you might be used from Vert.x. For async operations like subscribing to the eventbus or deploying a Verticle you would call a method like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;vertx.deployVerticle(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.foo.OtherVerticle&quot;&lt;/span&gt;, res -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
    startFuture.complete();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    startFuture.fail(res.cause());
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;deployVerticle&lt;/em&gt; method takes the Verticle-name and a &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; as its arguments. The &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; is called after Vert.x tried deploying the Verticle. This style can also be used for Scala (which might ease the transition when coming from the Java-world) but their is a way more &lt;em&gt;scalaish&lt;/em&gt; way of doing this.&lt;/p&gt;
&lt;p&gt;For every method taking a &lt;em&gt;Handler[AsyncResult]&lt;/em&gt; as its argument I create an alternative method using &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;Scala-Futures&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs scala&quot;&gt;vertx.deployVerticleFuture(&lt;span class=&quot;hljs-string&quot;&gt;&quot;com.foo.OtherVerticle&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;1&amp;gt;&lt;/span&gt;
  .onComplete{  &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Success&lt;/span&gt;(s) =&amp;gt; println(s&lt;span class=&quot;hljs-string&quot;&gt;&quot;Verticle id is: $s&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-comment&quot;&gt;// &amp;lt;3&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Failure&lt;/span&gt;(t) =&amp;gt; t.printStackTrace()
  }&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;A method providing a &lt;em&gt;Future&lt;/em&gt; based alternative gets &lt;em&gt;Future&lt;/em&gt; appended to its name and returns a &lt;em&gt;Future&lt;/em&gt; instead of taking a &lt;em&gt;Handler&lt;/em&gt; as its argument.&lt;/li&gt;
&lt;li&gt;We are now free to use &lt;em&gt;Future&lt;/em&gt; the way we want. In this case onComplete is used to react on the completion.&lt;/li&gt;
&lt;li&gt;Pattern matching on the result &lt;em&gt;&amp;lt;3&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I strongly recommend using this approach over using &lt;em&gt;Handlers&lt;/em&gt; as you won’t run into Callback-hell and you get all the goodies Scala provides for async operations.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Future and Promise both need a ExecutionContext &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; The &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/VertxExecutionContext.scala&quot;&gt;VertxExecutionContext&lt;/a&gt; is made implicitly available inside the &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-scala/blob/master/vertx-lang-scala/src/main/scala/io/vertx/lang/scala/ScalaVerticle.scala&quot;&gt;ScalaVerticle&lt;/a&gt;. It makes sure all  operations are executed on the correct Event Loop. If you are using Vert.x without Verticles you have to provide it on your own.
&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-the-console&quot;&gt;Using the console&lt;/h2&gt;
&lt;p&gt;A great feature of sbt is the embedded, configurable Scala-console. The console available in the quickstart-project is pre-configured to provide a fresh Vert.x-instance and all required imports so you can start playing around with Vert.x in an instant.&lt;/p&gt;
&lt;p&gt;Execute the following commands in the project-folder to deploy the &lt;em&gt;HttpVerticle&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;sbt
&amp;gt; console
scala&amp;gt; vertx.deployVerticle(nameForVerticle[HttpVerticle])
scala&amp;gt; vertx.deploymentIDs&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After  executing this sequence you can now point your browser &lt;a href=&quot;http://localhost:8666/hello&quot;&gt;http://localhost:8666/hello&lt;/a&gt; to see our message. The last command issued shows the Ids under which Verticles have been deployed.&lt;/p&gt;
&lt;p&gt;To get rid of the deployment you can now type &lt;code&gt;vertx.undeploy(vertx.deploymentIDs.head)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;that-s-it-&quot;&gt;That’s it!&lt;/h2&gt;
&lt;p&gt;This was a very quick introduction to our new Scala-stack. I hope to have given you a little taste of the Scala goodness now available with Vert.x. I recommend digging a little more through the quickstart to get a feeling for what’s there.
In my next blog post I will explain some of the decisions I made and the obstacles I faced with the differences between Java and Scala /Hint: They are way bigger than I was aware of).&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Demo Schedule at Devoxx US</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/VD5MHpOdaDw/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/VD5MHpOdaDw/</link>
	<description>Visit the Eclipse Foundation at booth #318 on March 21-23 in San Jose, CA for some exciting demos.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/VD5MHpOdaDw&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 19 Mar 2017 10:40:00 +0000</pubDate>
</item>
<item>
	<title>Orion: Announcing Orion 14</title>
	<guid isPermaLink="false">http://planetorion.org/news/?p=878</guid>
	<link>http://planetorion.org/news/2017/03/announcing-orion-14/</link>
	<description>&lt;p&gt;We are pleased to announce the fourteenth release of Orion, “Your IDE in the Cloud”. You can run it now on &lt;a href=&quot;https://orionhub.org&quot;&gt;OrionHub&lt;/a&gt; or &lt;a href=&quot;http://download.eclipse.org/orion/drops/R-14.2-201703170901/index.html&quot;&gt;download the server&lt;/a&gt; to run your own instance. Once again, thank you to all committers and contributors for your hard work this release.  There were 150 &lt;a href=&quot;https://bugs.eclipse.org/bugs/buglist.cgi?bug_status=RESOLVED&amp;amp;bug_status=VERIFIED&amp;amp;bug_status=CLOSED&amp;amp;classification=ECD&amp;amp;list_id=16007571&amp;amp;product=Orion&amp;amp;query_format=advanced&amp;amp;resolution=FIXED&amp;amp;target_milestone=14.0&quot;&gt;bugs and enhancements&lt;/a&gt; fixed, across more than 380 commits from 14 authors!&lt;/p&gt;
&lt;p&gt;What’s new in Orion 14?  This release was focussed on quality and ease of use – Orion 14 is more accessible (better colours and accessibility), easier to start coding in (the tools now automatically understand complex project configurations, so you don’t have to), and just more awesome in general.&lt;/p&gt;
&lt;p&gt;We continued to improve the Node.js server (which is used on &lt;a href=&quot;http://orion.eclipse.org&quot;&gt;orion.eclipse.org&lt;/a&gt; or &lt;a href=&quot;https://wiki.eclipse.org/Orion/Node/Getting_started&quot;&gt;locally&lt;/a&gt;), and continued to improve our &lt;a href=&quot;https://wiki.eclipse.org/Orion/Documentation/Developer_Guide/Electron&quot;&gt;Electron app&lt;/a&gt;. Lastly, we began work in 14.0 to provide &lt;a href=&quot;https://git.eclipse.org/r/#/c/90145/&quot;&gt;collaborative&lt;/a&gt; development support and &lt;a href=&quot;https://git.eclipse.org/r/#/c/93161/&quot;&gt;debugging&lt;/a&gt; support directly in Orion! Stay tuned in Orion 15 for these features to officially land.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</description>
	<pubDate>Fri, 17 Mar 2017 18:56:01 +0000</pubDate>
</item>
<item>
	<title>itemis: Debugging Xtext grammars – what to do when your language is ambiguous</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/debugging-xtext-grammars-what-to-do-when-your-language-is-ambiguous</guid>
	<link>https://blogs.itemis.com/en/debugging-xtext-grammars-what-to-do-when-your-language-is-ambiguous</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.itemis.com/en/xtext/&quot;&gt;Xtext&lt;/a&gt; uses &lt;a href=&quot;http://www.antlr.org/&quot;&gt;ANTLR&lt;/a&gt; to generate a lexer and parser out of your grammar. Technically an &lt;a href=&quot;http://www.antlr.org/papers/LL-star-PLDI11.pdf&quot;&gt;LL(*)&lt;/a&gt; parser gets generated. This means it cannot deal with left recursion and has an infinite lookahead. You might know what that means, but to make it easier you could think about LL(*) parsers like this: A parser gets an ordered list of things (called tokens) to collect in a labyrinth. When it’s not clear which way to go it stands still and tries to look in all directions until their end. As soon as it is obvious where to go, it continues walking and collecting. There is no way back – so decisions should be correct. Sometimes this is not the case and the parser can make a clear decision. In this situation it gets tricky to understand where the problem is and how to resolve it. Mostly shown errors and warnings are not that meaningful.&lt;/p&gt; 
&lt;img alt=&quot;debugging-xtext-grammar.jpg&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/Fotolia_87366402_S.jpg?t=1489825995643&amp;amp;width=640&amp;amp;name=Fotolia_87366402_S.jpg&quot; style=&quot;width: 640px; display: block; margin-left: auto; margin-right: auto;&quot; title=&quot;debugging-xtext-grammar.jpg&quot; width=&quot;640&quot; /&gt; 
&lt;p&gt;&lt;br /&gt;What do you normally do when the Xtext workflow reports warnings or errors while the parser gets generated? Obviously errors can’t be ignored since the parser will not get generated and the workflow fails – but what about warnings? Do you try to solve them by staring at the grammar and try to think like a parser? Or you ignore them because it seams to work? Really?&lt;/p&gt; 
&lt;p&gt;In projects we have seen people dealing with such problems in various ways. Ignoring warnings is not a good idea, since ANTLR switches off alternatives and you do not know which one. We have seen people consequently ignoring such warnings, because they cannot figure out the real cause and things got complex. However ignoring those warnings should not be an option.&lt;/p&gt; 
&lt;p&gt;I have seen that a large group of Xtext users do not know &lt;a href=&quot;http://www.antlr3.org/works/&quot;&gt;ANTLRWorks&lt;/a&gt; or that it can help here. So let’s make two trivial examples to see how to use the tool with Xtext.&lt;/p&gt; 
&lt;h2&gt;&lt;strong&gt;Warnings&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;Let’s make a trivial example where it is really obvious what the problem is:&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;example-grammar-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/examplegrammar1.png?t=1489825995643&amp;amp;width=724&amp;amp;name=examplegrammar1.png&quot; style=&quot;width: 724px;&quot; title=&quot;example-grammar-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;We have two parser rules (Element1 and Element2) that look identically except that there are different parts optional. During the workflow runs it reports the following warnings:&lt;/p&gt; 
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;warning(200): ../com.itemis.blog.antlrworks.dsl/src-gen/com/itemis/blog/antlrworks/parser/antlr/internal/InternalDsl.g:114:2: Decision can match input such as &quot;'element' 'id' RULE_ID 'int' RULE_INT&quot; using multiple alternatives: 1, 2&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;As a result, alternative(s) 2 were disabled for that input&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;warning(200): ../com.itemis.blog.antlrworks.dsl.ide/src-gen/com/itemis/blog/antlrworks/ide/contentassist/antlr/internal/InternalDsl.g:156:1: Decision can match input such as &quot;'element' 'id' RULE_ID 'int' RULE_INT&quot; using multiple alternatives: 1, 2&lt;/span&gt; &lt;/p&gt; 
&lt;p&gt;In this case the parser gets generated, but it tells us that there were different alternatives for the same input and that ANTLR decided to disable 2 of them. It does not tell us which once. Let’s find out what the cause is.&lt;/p&gt; 
&lt;p&gt;ANTLRWorks comes as an executable jar – running it should not be a problem as long as java is installed. If you want to open a grammar it expects an &lt;em&gt;*.g&lt;/em&gt; file. Xtext should have generated one in the &lt;em&gt;src-gen&lt;/em&gt; folder. In our example there is a &lt;em&gt;.g&lt;/em&gt; file located here: &lt;em&gt;com.itemis.blog.antlrworks.dsl/src-gen/com/itemis/blog/antlrworks/parser/antlr/internal/InternalDsl.g&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;The grammar looks a bit strange and there is a lot of Java stuff in the grammar. ANTLRWorks will fail to compile the grammar… damn.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Error-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/Error.png?t=1489825995643&amp;amp;width=495&amp;amp;name=Error.png&quot; style=&quot;width: 495px; display: block; margin-left: auto; margin-right: auto;&quot; title=&quot;Error-debugging-xtext-grammars.png&quot; width=&quot;495&quot; /&gt;Ok, the generated ANTLR grammar cannot be directly used in ANTLRWorks since it is modified to the needs of Xtext. To generate a so-called debugable grammar you need to modify the workflow a bit like this.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;workflow-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/workflow.png?t=1489825995643&amp;amp;width=724&amp;amp;name=workflow.png&quot; style=&quot;width: 724px;&quot; title=&quot;workflow-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Now you’ll find a &lt;em&gt;.g&lt;/em&gt; file in &lt;em&gt;src-gen&lt;/em&gt; that carries the name &lt;em&gt;DebugInternal*.g. &lt;/em&gt;This file can be easily used with ANTLRWorks.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Path-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/Path.png?t=1489825995643&amp;amp;width=724&amp;amp;name=Path.png&quot; style=&quot;width: 724px;&quot; title=&quot;Path-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;After you have started ANTLRWorks click on File-&amp;gt;Open and select the DebugInternal*.g file.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;File-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/File.png?t=1489825995643&amp;amp;width=724&amp;amp;name=File.png&quot; style=&quot;width: 724px;&quot; title=&quot;File-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;ANTLRWorks will open the grammar and you’ll see the different rules. So far no warnings are shown. To let the tool do it’s job click on debug – the button looks like a bug. After doing that the &lt;em&gt;ruleElement&lt;/em&gt; is marked read. By clicking on the rule you’ll see the problem that caused the warnings and the different alternatives. To really see what the disabled alternatives are you could enable them as shown in the next picture. The read arrows will show the disabled alternatives.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;ANTLRWorks-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/ANTLRWorks2.png?t=1489825995643&amp;amp;width=724&amp;amp;name=ANTLRWorks2.png&quot; style=&quot;width: 724px;&quot; title=&quot;ANTLRWorks-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;As already said this is a very trivial example and the tool just points out what we already know. In typical projects we have far more complex scenarios where it is nearly impossible to get the cause of a warning without ANTLRWorks. Especially when a lot of parts are optional it gets tricky. To really understand what the parser does there is the possibility to debug the grammar with a given input and see how the parsetree is constructed. Clicking on debug once more brings up a window to define the input.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Input-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/Input1.png?t=1489825995643&amp;amp;width=724&amp;amp;name=Input1.png&quot; style=&quot;width: 724px;&quot; title=&quot;Input-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;Debugging in ANTLRWorks works similar like you know it from Eclipse and you can step forward and backward. At the end the parsetree will show that the parser went into the rule “Element1” instead of “Element2”. From a grammar point of view both rules would be valid but ANTLR switched of the alternative. Otherwise no clear decision could be made.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/Debug1.png?t=1489825995643&amp;amp;width=724&amp;amp;name=Debug1.png&quot; style=&quot;width: 724px;&quot; title=&quot;debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;If we add a second line as an input for the debugger and leave out the &lt;em&gt;intValue&lt;/em&gt; the parsetree looks like this:&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Input-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/Input2.png?t=1489825995643&amp;amp;width=724&amp;amp;name=Input2.png&quot; style=&quot;width: 724px;&quot; title=&quot;Input-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/debug2.png?t=1489825995643&amp;amp;width=806&amp;amp;name=debug2.png&quot; style=&quot;width: 806px;&quot; title=&quot;debugging-xtext-grammars.png&quot; width=&quot;806&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;As the &lt;em&gt;intValue&lt;/em&gt; is mandatory in the &lt;em&gt;ruleElement1&lt;/em&gt; the parser will go into &lt;em&gt;ruleElement2&lt;/em&gt; for the second entry. This is the only case where “Element2” is picked. In this trivial example it’s not that hard to guess what the parser will do. In more complex example this debugging feature will really bring a big benefit to solve your ambiguities. &lt;/p&gt; 
&lt;h2&gt;&lt;strong style=&quot;background-color: transparent;&quot;&gt;Errors&lt;/strong&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;What about errors? Do you know what to do when the workflow reports that a rule has a non-LL(*) decision? What the hell is left-refactoring, syntactic predicates and why should I use backtracking – should I really? We’ll handle that in another blogpost, but for now let’s have a look at a simple language that has some expressions.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;grammar-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/grammar2.png?t=1489825995643&amp;amp;width=724&amp;amp;name=grammar2.png&quot; style=&quot;width: 724px;&quot; title=&quot;grammar-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt; &lt;/p&gt; 
&lt;p&gt;When we try to run the Xtext workflow the generator will report the following error:&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt; error(211): ../com.itemis.blog.antlrworks.dsl/src-gen/com/itemis/blog/antlrworks/parser/antlr/internal/InternalDsl.g:114:2: [fatal] rule ruleExpression has non-LL(*) decision due to recursive rule invocations reachable from alts 1,3. Resolve by left-factoring or using syntactic predicates or using backtrack=true option.&lt;/span&gt; &lt;/p&gt; 
&lt;p&gt;Various exceptions are show below the error, but Xtext will generate the &lt;em&gt;.g &lt;/em&gt;file anyway – so there is a chance to find out what the problem is. You might already know what’s wrong, but let’s try to use ANTLRWorks. The compiler in ANTLRWorks will show the very same error, but after ignoring that the rule element is marked red. The different alternatives are marked red.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;ANTLRWorks-Error-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/ANTLRWorksError.png?t=1489825995643&amp;amp;width=724&amp;amp;name=ANTLRWorksError.png&quot; style=&quot;width: 724px;&quot; title=&quot;ANTLRWorks-Error-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;br /&gt; In this case left-recursion is not our problem. ANTLRWorks shows us, that &lt;em&gt;ruleBlockExpression&lt;/em&gt; and &lt;em&gt;ruleListLiteral&lt;/em&gt; are the cause.&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;rule1.png&quot; height=&quot;67&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/rule1.png?t=1489825995643&amp;amp;width=724&amp;amp;height=67&amp;amp;name=rule1.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;rule-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/rule2.png?t=1489825995643&amp;amp;width=724&amp;amp;name=rule2.png&quot; style=&quot;width: 724px;&quot; title=&quot;rule-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;After having a closer look it is obvious that the syntax is equal if there is only one expression inside – that makes our grammar ambiguous. Do we really want a &lt;em&gt;ListLiteral&lt;/em&gt; to exist on the same level as a &lt;em&gt;BlockExpression&lt;/em&gt;? Do we really want a &lt;em&gt;BlockExpression&lt;/em&gt; contain various other &lt;em&gt;BlockExpressions&lt;/em&gt;?&lt;/p&gt; 
&lt;p&gt;After considering these questions a refactored grammar looks like this:&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;refactored-grammar-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/refactoredgrammar.png?t=1489825995643&amp;amp;width=724&amp;amp;name=refactoredgrammar.png&quot; style=&quot;width: 724px;&quot; title=&quot;refactored-grammar-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;After doing that the workflow will run through and we are good to have a second look in ANTLRWorks to see the parsetree for a simple expression:&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;input-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/input3.png?t=1489825995643&amp;amp;width=724&amp;amp;name=input3.png&quot; style=&quot;width: 724px;&quot; title=&quot;input-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;debug-Expression-debugging-xtext-grammars.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/ANTLRWorks/debugExpression.png?t=1489825995643&amp;amp;width=724&amp;amp;name=debugExpression.png&quot; style=&quot;width: 724px;&quot; title=&quot;debug-Expression-debugging-xtext-grammars.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;These examples are very trivial to make it obvious where the problem is. The intension was to let you know how to use ANTLRWorks with Xtext. Don't ignore warnings anymore – you might not know the implications. The parsetree might look different as you though.&lt;/p&gt; 
&lt;p&gt;Stay tuned for another post about syntactic predicates, left-recursion / left-refactoring and why backtracking is not an option. And if you've got any questions regarding Xtext – don't hesitate to contact us!&lt;/p&gt; 
&lt;p&gt;&lt;a class=&quot;cta_button&quot; href=&quot;https://cta-image-cms2.hubspot.com/ctas/v2/public/cs/ci/?pg=78567f96-0e8e-4c0b-8822-523822026eba&amp;amp;pid=761475&amp;amp;ecid=&amp;amp;eid=&amp;amp;ic=&quot;&gt; &lt;img align=&quot;middle&quot; alt=&quot;Contact the  itemis Xtext team&quot; class=&quot;hs-cta-img &quot; src=&quot;https://no-cache.hubspot.com/cta/default/761475/78567f96-0e8e-4c0b-8822-523822026eba.png&quot; /&gt; &lt;/a&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fdebugging-xtext-grammars-what-to-do-when-your-language-is-ambiguous&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 17 Mar 2017 15:00:04 +0000</pubDate>
	<author>schill@itemis.com (Holger Schill)</author>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon France: Last Chance to Submit!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/gPuHBFNepMg/cfp</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/gPuHBFNepMg/cfp</link>
	<description>March 29 is the final submission deadline for EclipseCon France. Visit the CFP page for info. See you in Toulouse this June!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/gPuHBFNepMg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 17 Mar 2017 14:25:00 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: Vert.x and IoT in Rome : what a meetup !</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=4147</guid>
	<link>https://paolopatierno.wordpress.com/2017/03/17/vert-x-and-iot-in-rome-what-a-meetup/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;Yesterday I had a great day in Rome for a meetup hosted by &lt;a href=&quot;https://www.meetup.com/Meet-cast/&quot; target=&quot;_blank&quot;&gt;Meet{cast}&lt;/a&gt; (powered by &lt;a href=&quot;http://dotnetpodcast.com/&quot; target=&quot;_blank&quot;&gt;dotnetpodcast&lt;/a&gt; community) and &lt;a href=&quot;http://www.codemotionworld.com/&quot; target=&quot;_blank&quot;&gt;Codemotion&lt;/a&gt;, speaking about &lt;a href=&quot;http://vertx.io/&quot; target=&quot;_blank&quot;&gt;Vert.x&lt;/a&gt; and how we can use it for developing “end to end” Internet of Things solutions.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;17352445_10208955590111131_6229030843024604532_n&quot; class=&quot;alignnone size-full wp-image-4159&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/17352445_10208955590111131_6229030843024604532_n.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;17352567_10208955588791098_766816304298598626_n&quot; class=&quot;alignnone size-full wp-image-4161&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/17352567_10208955588791098_766816304298598626_n.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;I started with an high level introduction on Vert.x and how it works, its internals and its main usage then I moved to dig into some specific components useful for developing IoT applications like the MQTT server, AMQP Proton and Kafka client.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;17342690_10208955588751097_8818320599257580571_n&quot; class=&quot;alignnone size-full wp-image-4165&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/17342690_10208955588751097_8818320599257580571_n.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;17352571_10208955588951102_2851165399929439718_n&quot; class=&quot;alignnone size-full wp-image-4168&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/17352571_10208955588951102_2851165399929439718_n.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It was interesting to know that even in Italy a lot of developers and companies are moving to use Vert.x for developing microservices based solutions. A lot of interesting questions came out … people seem to like it !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, in order to prove the Vert.x usage in enterprise applications I showed two real use cases that today work thanks to the above components : &lt;a href=&quot;https://www.eclipse.org/hono/&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; and &lt;a href=&quot;https://github.com/EnMasseProject/enmasse&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt;. I had few time to explain better how EnMasse works in details, the Qpid Dispatch Router component in particular and for this reason I hope to have a future meetup on that, the AMQP router concept is quite new today ! In any case, knowing that such a scalable platform is based (even) on Vert.x was a great news for the attendees.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;17264802_10208955590191133_8923182437405273553_n&quot; class=&quot;alignnone size-full wp-image-4170&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/17264802_10208955590191133_8923182437405273553_n.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;If you are interested to know more about that, you can take a look to the &lt;a href=&quot;https://www.slideshare.net/paolopat/reactive-internet-of-thins-the-vertx-way&quot; target=&quot;_blank&quot;&gt;slides&lt;/a&gt; and the &lt;a href=&quot;https://github.com/ppatierno/reactive-iot-vertx&quot; target=&quot;_blank&quot;&gt;demo&lt;/a&gt;. In the coming days, the video of the meetup will be available online but it will be in Italian (my apologies for my English only friends :-)). Hope you’ll enjoy the content !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Of course, I had some networking with attendees after the meetup and … with some beer &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;img alt=&quot;17310150_1421561734583219_8414988688301135801_o&quot; class=&quot;alignnone size-full wp-image-4191&quot; src=&quot;https://paolopatierno.files.wordpress.com/2017/03/17310150_1421561734583219_8414988688301135801_o.jpg?w=620&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/4147/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/4147/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=4147&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 17 Mar 2017 10:45:11 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.4.4.AM1 for Eclipse Neon.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.4.4.am1-for-neon.2.html</guid>
	<link>https://tools.jboss.org/blog/4.4.4.am1-for-neon.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.4.4.AM1 (Developer Milestone 1) build for Eclipse Neon.2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.AM1.html&quot;&gt;JBoss Tools 4.4.4 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.4.4.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Although our main focus is bug fixes, we continue to work on providing better experience for container based development in JBoss Tools and Developer Studio. Let’s go through a few interesting updates here and you can find more details on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.4.2.AM1.html&quot;&gt;the What’s New page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-server-adapter-enhanced-flexibility&quot;&gt;&lt;/a&gt;OpenShift Server Adapter enhanced flexibility&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;OpenShift server adapter is a great tool that allows developers to synchronize local changes in the Eclipse workspace with running pods in the
      OpenShift cluster. It also allows you to remote debug those pods when the server adapter is launched in Debug mode.
      The supported stacks are Java and NodeJS.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As pods are ephemeral OpenShift resources, the server adapter definition was based on an OpenShift service resource and the pods are then
      dynamically computed from the service selector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This has a major drawback as it allows to use this feature only for pods that are part of a service, which may be logical for Web based applications
      as a route (and thus a service) is required in order to access the application.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, it is now possible to create a server adapter from the following OpenShift resources:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service (as before)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;pod&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If a server adapter is created from a pod, it will be created from the associated OpenShift resource, in the preferred order:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;service&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;deployment config&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;replication controller&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As the OpenShift explorer used to display OpenShift resources that were linked to a service, it has been enhanced as well.
      It now displays resources linked to a deployment config or replication controller.
      Here is an example of a deployment with no service ie a deployment config:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, as an OpenShift server adapter can be created from different kind of resources, the kind of associated resource is displayed when
      creating the OpenShift server adapter:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once created, the kind of OpenShift resource adapter is also displayed in the Servers view:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This information is also available from the server editor:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;server adapter enhanced3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/server-adapter-enhanced3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#api-change-in-jmx-ui-s-new-connection-wizard&quot;&gt;&lt;/a&gt;API Change in JMX UI’s New Connection Wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While hardly something most users will care about, extenders may need to be aware that the API for adding connection types to the &amp;amp;aposNew JMX Connection&amp;amp;apos wizard in the &amp;amp;aposJMX Navigator&amp;amp;apos has changed.  Specifically, the &amp;amp;aposorg.jboss.tools.jmx.ui.providerUI&amp;amp;apos extension point has been changed. While previously having a child element called &amp;amp;aposwizardPage&amp;amp;apos, it now requires a &amp;amp;aposwizardFragment&amp;amp;apos.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A &amp;amp;aposwizardFragment&amp;amp;apos is part of the &amp;amp;aposTaskWizard&amp;amp;apos framework first used in WTP’s ServerTools, which has, for a many years, been used throughout JBossTools. This framework allows wizard workflows where the set of pages to be displayed can change based on what selections are made on previous pages.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change was made as a direct result of a bug caused by the addition of the Jolokia connection type in which some standard workflows could no longer be completed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This change only affects adopters and extenders, and should have no noticable change for the user, other than that the below bug has been fixed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;forge-runtime-updated-to-3-6-0-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-6-0-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.6.0.Final&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.6.0.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.6.0.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;startup&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/forge/images/4.4.4.AM1/startup.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 15 Mar 2017 21:50:44 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus-IC Research/Academia webinar</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=538</guid>
	<link>https://papyrusuml.wordpress.com/2017/03/15/papyrus-ic-researchacademia-webinar/</link>
	<description>&lt;p&gt;On Friday, March 17th at 16:00 CET, 15:00 GMT, and 11:00 EDT, the Papyrus Industry Consortium’s (a.k.a. Papyrus-IC or, as I prefer, Me-IC) Research and Academia committee will host their third &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars#Upcoming_webinars&quot; target=&quot;_blank&quot;&gt;webinar&lt;/a&gt; of the year. The topic is on an industry perspective on software product lines with speakers from Saab and Pure-Systems. See this &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars&quot;&gt;link&lt;/a&gt; for the connection information.&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/538/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/538/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=538&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 15 Mar 2017 17:19:31 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che – Day 4: Building Che</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=27945</guid>
	<link>http://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we share our experiences extending &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to add EMF support.. The &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;first post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; covers our goals. In previous posts, we describe how to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;add support for code generation&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;create a custom stack&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which provides the framework for code generation out of the box.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far, we have not yet written any code to extend Che. We have used the concept of Che workspaces, which are Docker containers, to deploy additional tools (in our case the code generator). As the browser IDE allows to execute any command on the workspace runtime, we did not have to implement something to extend it so far.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, there are requirements, where enhancing the workspace is not sufficient. This is typically the case when you enhance the UI of the browser IDE with new features or you add new APIs into agents running within workspaces. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this post, we will describe how to make a minor enhancement to the browser IDE with a simple “hello world” example. It is a good  first step to introduce the general process for extending Che. We will do more complex extensions in future blog posts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We at EclipseSource have many years of experience in building extensions for the Eclipse IDE and in building Eclipse-based applications. So before we go into detail, let us summarize our experience in developing extensions for Che from a viewpoint of a desktop Eclipse IDE developer. We focus on the most obvious similarities and differences.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The similarity&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: Eclipse Che has an inherently extensible and flexible architecture. This is mainly due to a central pattern: Service-Orientation. There are several ways how this pattern is used for extensibility:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Che provides services to build up almost anything in the UI. As an example, there is a service to register the actions which are shown in the various menus. As another example, there is a service to register file extensions (defining icons and default editors). These services can be layered into complex UI objectives such as creating a perspective with different menus, panels, and layouts.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Che provides services to access resources (e.g. the source files) and the workspace runtime (e.g. to trigger commands). By using these existing features, it is fairly simple to add new features on top.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Che server is mainly a collection of RESTful services. By adding custom REST services to the server, you can easily enhance it. Thus custom services can then be consumed by custom extensions in the browser IDE.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, Che defines service interfaces, which can be implemented by an extension to provide new things. As an example, you can implement a service, which implements the behavior to create a custom project type.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;The difference&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: There is currently no runtime plugin mechanism for the Che browser IDE comparable to what you are used to from the classic Eclipse IDE (a.k.a update sites/p2 repositories). This means, to extend Che, you need to build your custom version of it which contains your extensions and then deploy the full assembly somewhere. Technically, “plugins” in Che are maven modules, that you add to the global build during compile time. There is no runtime extensibility of the browser IDE. So, &lt;/span&gt;&lt;b&gt;isn’t this a step backwards&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; compared to the classic Eclipse IDE? There are different answers to this question, depending on the point of view:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;No&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, because Che supports extensibility at runtime based on its workspace concept. If you miss any tool or runtime component, you can simply deploy it into your workspace and easily share it with co-workers. As an example, we enabled the EMF code generation only by extending the workspace at runtime (see &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;). In the classic Eclipse IDE, everybody had to install the same things again (at least when not using Oomph). &lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Partially&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, as you cannot extend neither the browser IDE, nor the Che server at runtime, but only the workspace. However, Che has a different deployment scenario. As it is a client-server application, the idea is to do the set-up once in a central way and then share it for a group of developers, which require the same set of tools. This enables a very fast setup for developers on a project (pretty much like Oomph for classic Eclipse). It even enables to use different IDEs, which access the same workspace. However, it means more work for the author and maintainer of extensions, but a simpler life/set-up for the developers.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Yes&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, we miss OSGi, extension points and p2 repositories! Although OSGi and p2 have been criticized in the past, they are a very powerful combination to build up modular and extensible applications. This in combination with the great tooling provided by Eclipse made it possible to efficiently develop, install, update and deploy extensions to the IDE. This was probably one of the core factors to create such a huge ecosystem of tools. &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So at the end, it really depends on the scenario and your design objectives. It is worth mentioning, that there is a general trend (also followed by Che) to move UI related parts of the IDE into server-side abstractions, so that they become independent. The language server protocol is a good example for this. In this scenario, an IDE only has to support to interpret the abstractions, e.g. the LSP. Therefore, client-site extensibility may become less important.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Anyways, let us get started with building Che locally.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/03/image02.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-27949&quot; height=&quot;157&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/03/image02.png&quot; width=&quot;618&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First, you need install all the prerequisites to build and run Che. We already mentioned that you will need Docker, but there are a number of tools and environment settings needed for building Che.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There are two ways to get started. We recommend to start headless, first, and follow the guide &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/che/wiki/Development-Workflow#build-and-run-from-source&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;how to clone and build Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. As a second step, in case you want to use an IDE, we recommend the &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/che/docs/plugins/setup-che-workspace/index.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Che workspace setup guide&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for an extensive overview.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We recommend to take the time to read the provided documentation carefully, as it contains useful information and lots of useful hints how to develop for Che. You should pay special attention to the “&lt;/span&gt;&lt;a href=&quot;http://www.gwtproject.org/articles/superdevmode.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Super Dev Mode&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;”, which allows hot code replacement for GWT applications and therefore drastically reduces the turnaround time when working on the browser IDE.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There is also an option to build Che within a preconfigured Docker environment which will spare you the trouble of setting it up yourself. Finally, the building Che will take some time to complete even if you have a fast machine. Therefore, we recommend to take a close look at the options, which are described in detail &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/che/wiki/Development-Workflow#build-and-run&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The build process will result into a number of artifacts, also called assemblies in Che terminology. You can find them within the “assembly” subdirectory. You can match the assemblies to the logical components of the Che architecture. Just compare the directory with the &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/che/docs/#logical-architecture&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;architecture schema&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and the &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/che/docs/plugins/assemblies/index.html#modules&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;modules overview&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After the build completed you can start Che on your local machine. The simplest way to do that is to navigate to the assembly/assembly-main/target/[che-version]/[che-version] directory and execute “bin/che.sh start”. A number of long messages should confirm the successful start of the services and point you to open localhost:8080 in your browser. If everything went well you will be greeted by the Che dashboard.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So now that we can build check locally, let us do a very simple change to verify the build process. An example for such a simple change would be to add a project template to the browser IDE. Project templates can be instantiated by any user of the IDE. As we are working on EMF support, it would be useful to have an example EMF project as a template. We have already manually imported such a template from a Git repository in the &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;second part of this blog series&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which we will now add as a fixed template to our custom assembly.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Project templates are basically pointers to existing Git repositories. This enables to easily maintain the templates without re-distributing the IDE itself. The sample templates are maintained in the following file: &lt;/span&gt;&lt;/p&gt;

&lt;pre lang=&quot;&quot;&gt;ide/che-core-ide-templates/src/main/resources/samples.json
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let us add following snippet to this file:&lt;/span&gt;&lt;/p&gt;

&lt;pre lang=&quot;&quot;&gt;  {
   &quot;name&quot;: &quot;emfforms-makeithappen-blank&quot;,
   &quot;displayName&quot;: &quot;emfforms-makeithappen-blank&quot;,
   &quot;path&quot;: &quot;/&quot;,
   &quot;description&quot;: &quot;EMFForms, make it happen!&quot;,
   &quot;projectType&quot;: &quot;java&quot;,
   &quot;mixins&quot;: [],
   &quot;attributes&quot;: {
     &quot;language&quot;: [
       &quot;java&quot;
     ]
   },
   &quot;modules&quot;: [],
   &quot;problems&quot;: [],
   &quot;source&quot;: {
     &quot;type&quot;: &quot;git&quot;,
     &quot;location&quot;: &quot;https://github.com/eclipsesource/emfforms-makeithappen-blank&quot;,
     &quot;parameters&quot;: {}
   },
   &quot;commands&quot;: [],
   &quot;links&quot;: [],
   &quot;category&quot;: &quot;Samples&quot;,
   &quot;tags&quot;: [
     &quot;maven&quot;,
     &quot;java&quot;
   ]
 }
&lt;/pre&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Afterwards we need to stop the currently running che instance by executing “bin/che.sh stop”, rebuild Che and afterwards start it again using “bin/che.sh start”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a result, the new project template will be available among the existing ones:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course, this was a very simple change, it did not even involve any coding. However, we are now prepared to do more complex changes and start coding. Please note, that in our example, we changed a configuration file of Che to add our custom project template. Those kind of extensions are usually done by invoking services, which allow to extend the base configuration of Che (in our case add a new project template). We will get back to this cleaner solution later in this series.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When starting to code extensions for Che, those are typically placed in separated maven modules (i.e. plugins). This is conceptually pretty much like developing plugins for classic Eclipse. That means, the custom code will be separated from the core of Che. We will describe this more in detail in the next blog post of this series. As an example, we will create plugin, which registers a custom file type for “.ecore” including a custom icon.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So stay tuned! &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that due to &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt; and &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt;, the next post will be published in 3 weeks. Please note that we will give a &lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/building-extension-eclipse-che-experience-report&quot;&gt;talk at Eclipse Converge about our experience with extending Che&lt;/a&gt;. So in case you haven’t already, please &lt;a href=&quot;https://www.eclipseconverge.org/na2017/registration&quot;&gt;register soon&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please feel free to &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;section&gt;
&lt;div class=&quot;row&quot; style=&quot;padding: 0em;&quot;&gt;
&lt;div class=&quot;col2&quot;&gt;&lt;img alt=&quot;_MG_4540b2&quot; class=&quot;alignnone wp-image-23168&quot; height=&quot;86&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/02/mathias.jpg&quot; width=&quot;129&quot; /&gt;&lt;/div&gt;
&lt;div class=&quot;col10&quot;&gt;&lt;strong&gt;Co-Author&lt;/strong&gt;&lt;/div&gt;
&lt;div class=&quot;col10&quot;&gt;Mat Hansen&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=EMF+Support+for+Che+%26%238211%3B+Day+4%3A+Building+Che&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&amp;amp;t=EMF+Support+for+Che+%26%238211%3B+Day+4%3A+Building+Che&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/che/&quot; title=&quot;che Tag&quot;&gt;che&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/eclipse/&quot; title=&quot;eclipse Tag&quot;&gt;eclipse&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 15 Mar 2017 13:53:41 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Fancy tooltips</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-807238025511157892</guid>
	<link>http://codeandme.blogspot.com/2017/03/fancy-tooltips.html</link>
	<description>I always liked the tooltips available in eclipse editors. Having a browser widget that may capture focus is nice to display more complex help topics in the UI. Unfortunately the eclipse implementation is heavily bound to editors and cannot be used for other parts.&lt;br /&gt;&lt;br /&gt;Well, up to now. For EASE I wanted to reuse these tooltips to display API documentation in a treeviewer. The result looks quite satisfactory:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-HTnn_ef6tHw/WMksIhYbllI/AAAAAAAAA4Q/6vFNjiEvlFkoCCTPb-UGxqBteV3-kZuzwCLcB/s1600/tooltips.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://3.bp.blogspot.com/-HTnn_ef6tHw/WMksIhYbllI/AAAAAAAAA4Q/6vFNjiEvlFkoCCTPb-UGxqBteV3-kZuzwCLcB/s400/tooltips.png&quot; width=&quot;327&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;I built some API to add these tooltips to any kind of SWT controls. While it may not be perfect it seems rather simple to use for me.&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;  final HoverManager hoverManager = new HoverManager(parent);&lt;br /&gt;  hoverManager.addHover(fModulesComposite.getTreeViewer(), new IHoverContentProvider() {&lt;br /&gt;&lt;br /&gt;   @Override&lt;br /&gt;   public void populateToolbar(BrowserInformationControl control, ToolBarManager toolBarManager) {&lt;br /&gt;    // nothing to do&lt;br /&gt;   }&lt;br /&gt;&lt;br /&gt;   @Override&lt;br /&gt;   public String getContent(Object origin, Object detail) {&lt;br /&gt;    return &quot;&amp;lt;p&amp;gt;This is HTML content&amp;lt;/p&amp;gt;&quot;;&lt;br /&gt;   }&lt;br /&gt;  });&lt;br /&gt;&lt;/pre&gt;To see these tooltips in action &lt;a href=&quot;https://www.eclipse.org/ease/download/&quot; target=&quot;_blank&quot;&gt;get a nightly build of EASE&lt;/a&gt; and open the &lt;i&gt;Modules Explorer&lt;/i&gt; view.&lt;br /&gt;&lt;br /&gt;Now I am wondering if there is any interest in making this API available for other eclipse projects. &lt;br /&gt;When extracting the functionality I had to access some internal classes from org.eclipse.jface.text and JDT - mostly because of package private methods. Porting back these changes would be possible, still I am wondering if org.eclipse.jface.text would be the right place for it. Why should a generic view depend on jface.text just to get nice tooltip support?&lt;br /&gt;&lt;br /&gt;So lets see if there is interest in adopting this feature and where to put it.</description>
	<pubDate>Wed, 15 Mar 2017 12:02:38 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Dirk Fauth: OSGi Declarative Services news in Eclipse Oxygen</title>
	<guid isPermaLink="false">http://blog.vogella.com/?p=7561</guid>
	<link>http://blog.vogella.com/2017/03/15/osgi-declarative-services-news-in-eclipse-oxygen/</link>
	<description>&lt;p&gt;With this blog post I want to share my excitement about the OSGi DS related news that are coming with Eclipse Oxygen. I want to use this blog post to inform about the new features and also the changes you will face with these. With Oxygen M6 you can already have a look at those features and also provide feedback if you find any issues.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
You don’t have to be a committer or contribute code to be part of an Open Source Community. Also testing new features and providing feedback is a very welcome contribution to a project. So feel free to participate in making the Eclipse Oxygen release even better than the previous releases!&lt;/p&gt;
&lt;h2&gt;DS 1.3 with Felix SCR&lt;/h2&gt;
&lt;p&gt;The Equinox team decided to drop Equinox DS (stuck with DS 1.2) and replace it with Felix SCR (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=501950&quot; target=&quot;_blank&quot;&gt;Bug 501950&lt;/a&gt;). This brings DS 1.3 to Eclipse which was the last missing piece in the OSGi R6 compendium in Equinox.&lt;/p&gt;
&lt;p&gt;It was already possible to exchange Equinox DS with Felix SCR with Neon, but now you don’t need to replace it yourself, it is directly part of Equinox. There are some important things to notice though, which I will list here:&lt;/p&gt;
&lt;h3&gt;Felix SCR bundle from Orbit&lt;/h3&gt;
&lt;p&gt;The Felix SCR bundle included in Equinox/Eclipse is not equal to the Felix SCR bundle from Apache. The Apache bundle imports and exports the &lt;code&gt;org.osgi&lt;/code&gt; packages it requires, e.g. the component related interfaces like &lt;code&gt;ComponentContext&lt;/code&gt;, &lt;code&gt;ComponentFactory&lt;/code&gt; or &lt;code&gt;ComponentServiceObjects&lt;/code&gt;. It also contains the &lt;strong&gt;Promises API&lt;/strong&gt; used by Felix SCR, which was not available in Equinox before. The Felix SCR bundle in Orbit does not contain these packages. They are provided by other Equinox bundles, which are now required to use DS with Equinox.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
If you are interested in some more information about the reasons for the changes to the Orbit Felix SCR bundle, have a look at &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=496559&quot; target=&quot;_blank&quot;&gt;Bug 496559&lt;/a&gt; where Thomas Watson explained the reasons very nicely.&lt;/p&gt;
&lt;p&gt;The bundles needed for DS in Equinox are now as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.apache.felix.scr&lt;/code&gt;&lt;br /&gt;
The Declarative Services implementation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.osgi.services&lt;/code&gt;&lt;br /&gt;
Contains the required OSGi service interfaces.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.osgi.util&lt;/code&gt;&lt;br /&gt;
Contains the &lt;strong&gt;Promises API&lt;/strong&gt; and implementation required by Felix SCR.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.equinox.ds&lt;/code&gt; (optional)&lt;br /&gt;
Wrapper bundle to start Felix SCR and provide backwards compatibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding the &lt;strong&gt;Promises API&lt;/strong&gt; (see OSGi R6 Compendium Specification chapter 705) in Equinox is also a very nice, but worth its own blog post. So I will not go into more details here. The more interesting thing is that &lt;code&gt;org.eclipse.equinox.ds&lt;/code&gt; is still available and in some scenarios required. It does not contain a DS implementation anymore. It is used as a wrapper bundle to start Felix SCR and provide backwards compatibility. The main reasons are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Auto-starting DS&lt;br /&gt;
The Equinox startup policy is to start bundles only if a class is accessed from them, or if it is configured for auto-starting. As the SCR needs to be automatically started but actually no one really accesses a class from it, every Eclipse application that makes use of Declarative Services configured the auto-start of &lt;code&gt;org.eclipse.equinox.ds&lt;/code&gt; in the &lt;em&gt;Product Configuration&lt;/em&gt;. If that bundle would be simply replaced, every Eclipse based product would need to modify the &lt;em&gt;Product Configuration&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Behavioral Compatibility&lt;br /&gt;
Equinox DS and Felix SCR behave differently in some cases. For example Felix SCR deactivates and destroys a component once the last consumer, that references the component instance, is done with it. Equinox DS on the other hand keeps the instance (I explained that in my &lt;a href=&quot;http://blog.vogella.com/2017/02/13/control-osgi-ds-component-instances/&quot; target=&quot;_blank&quot;&gt;Control OSGi DS Component Instances&lt;/a&gt; blog post). As p2 and probably also other implementations rely on the Equinox behavior that components are not deactivated and destroyed immediately, the property&lt;p&gt;&lt;/p&gt;
&lt;pre class=&quot;bz_comment_text&quot; id=&quot;comment_text_26&quot;&gt;ds.delayed.keepInstances=true&lt;/pre&gt;
&lt;p&gt;is set automatically by &lt;code&gt;org.eclipse.equinox.ds&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Considering these changes it is also possible to remove &lt;code&gt;org.eclipse.equinox.ds&lt;/code&gt; from an Eclipse &lt;em&gt;Product Configuration&lt;/em&gt; and solely rely on &lt;code&gt;org.apache.felix.scr&lt;/code&gt;. You just need to ensure &lt;code&gt;org.apache.felix.scr&lt;/code&gt; is automatically started and &lt;code&gt;ds.delayed.keepInstances&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (e.g. required when using p2 as described in &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=510673&quot; target=&quot;_blank&quot;&gt;Bug 510673&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;DS Console Commands&lt;/h3&gt;
&lt;p&gt;If you want to inspect services via console, you need to know the new commands, as the old commands are not available anymore:&lt;/p&gt;
&lt;table style=&quot;height: 403px;&quot; width=&quot;715&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Equinox DS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Felix SCR&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;list/ls&lt;br /&gt;
[bundle-id]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scr:list&lt;br /&gt;
[bundle-id]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;List all components.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;component|comp&lt;br /&gt;
&amp;lt;comp-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scr:info&lt;br /&gt;
&amp;lt;comp-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Print all component information.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enable|en&lt;br /&gt;
&amp;lt;comp-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scr:enable&lt;br /&gt;
&amp;lt;comp-name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable a component.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disable|dis&lt;br /&gt;
&amp;lt;comp-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;scr:disable&lt;br /&gt;
&amp;lt;comp-name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Disable a component.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enableAll|enAll&lt;br /&gt;
[bundle-id]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Enable all components.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;disableAll|disAll&lt;br /&gt;
[bundle-id]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Disable all components.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Despite some different command names and the fact that the short versions are not supported, you should notice the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The scope (&lt;code&gt;scr:&lt;/code&gt;) is probably not needed in Equinox because there are by default no multiple commands with the same name. So only the command names after the colon can be used.&lt;/li&gt;
&lt;li&gt;There are no equivalent commands to enable or disable all components at once.&lt;/li&gt;
&lt;li&gt;To enable or disable a component you need to specify the &lt;span style=&quot;text-decoration: underline;&quot;&gt;name of the component&lt;/span&gt;, not the id that is shown by calling list before.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;DS 1.3 Annotations Support in PDE&lt;/h2&gt;
&lt;p&gt;With Eclipse Neon the DS Annotations Support was added to PDE. Now Peter Nehrer (Twitter: @pnehrer) has contributed the support for DS 1.3 annotations. In the &lt;em&gt;Preferences&lt;/em&gt; you will notice that you can specify which DS specification version you want to use. By default it is set to 1.3. The main idea is that it is possible to configure that only DS 1.2 annotations should be used in case you still need to develop on that specification level (e.g. for applications that run on Eclipse Neon).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;PDE_DS_annotations_1.3&quot; class=&quot;aligncenter wp-image-7563 size-full&quot; height=&quot;437&quot; src=&quot;http://blog.vogella.com/wp-content/uploads/2017/03/PDE_DS_annotations_1.3.png&quot; width=&quot;610&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Preferences&lt;/em&gt; page also has another new setting “Add DS Annotations to classpath”, which is enabled by default. That setting will automatically add the necessary library to the classpath. While this is nice if you only implement a plain OSGi application, this will cause issues in case of Eclipse RCP applications that are build using Tycho. The JAR that is added to the classpath is located in the IDE, so the headless Tycho build is not aware of it! For Eclipse RCP development I therefore suggest to disable that setting and add &lt;code&gt;org.osgi.service.component.annotations&lt;/code&gt; as an optional dependency to the &lt;code&gt;Import-Package&lt;/code&gt; header as described in my &lt;a href=&quot;http://blog.vogella.com/2016/06/21/getting-started-with-osgi-declarative-services/&quot; target=&quot;_blank&quot;&gt;Getting Started&lt;/a&gt; tutorial. At least if the bundles should be build with Tycho.&lt;/p&gt;
&lt;p&gt;As a quick overview, with DS 1.3 the following modifications to the annotations are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Life cycle methods accept &lt;em&gt;Component Property Types&lt;/em&gt; as parameter&lt;/li&gt;
&lt;li&gt;Introduction of the &lt;em&gt;Field Strategy&lt;/em&gt; which means &lt;code&gt;@Reference&lt;/code&gt; can be used for field injection&lt;/li&gt;
&lt;li&gt;Event methods can get the &lt;code&gt;ComponentServiceObjects&lt;/code&gt; parameter type for PROTOTYPE scoped references, and there are multiple parameter type options for these methods&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Component#configurationPid&lt;/code&gt;&lt;br /&gt;
multiple configuration PID values can be set and the value “$” can be used as placeholder for the name of the component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Component#servicefactory&lt;/code&gt;&lt;br /&gt;
deprecated and replaced by scope&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Component#reference&lt;/code&gt;&lt;br /&gt;
specify &lt;em&gt;Lookup Strategy&lt;/em&gt; references&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Component#scope&lt;/code&gt;&lt;br /&gt;
specify the service scope of the component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Reference#bind&lt;/code&gt;&lt;br /&gt;
specify the name of the bind event method of a reference&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Reference#field&lt;/code&gt;&lt;br /&gt;
name of the field, typically not specified manually&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Reference#fieldOption&lt;/code&gt;&lt;br /&gt;
specify how field values should be managed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Reference#scope&lt;/code&gt;&lt;br /&gt;
specify the reference scope&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
For further information have a look at my previous blog posts where I explained these options in comparison to DS 1.2.&lt;/p&gt;
&lt;p&gt;Although already in a very good shape, the DS 1.3 annotations are not finished 100% as of now. I already uncovered the following missing pieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Missing Require-Capability header in MANIFEST.MF (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513216&quot; target=&quot;_blank&quot;&gt;Bug 513216&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Missing Provide-Capability header in MANIFEST.MF (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=490063&quot; target=&quot;_blank&quot;&gt;Bug 490063&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;False error when using bind/updated/unbind parameter on field references (&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513462&quot; target=&quot;_blank&quot;&gt;Bug 513462&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IMHO it would be also nice if the necessary &lt;em&gt;p2.inf&lt;/em&gt; files are automatically created/updated to support &lt;a href=&quot;https://wiki.eclipse.org/Equinox/p2/Customizing_Metadata#Capability_Advice:&quot; target=&quot;_blank&quot;&gt;p2 Capability Advice&lt;/a&gt; configurations, which is necessary because p2 still does not support OSGi capabilities.&lt;/p&gt;
&lt;p&gt;As stated at the beginning, you could help with the implementation by testing and giving feedback on this implementation. It would be very helpful to have more people testing this, to have a stable implementation in the Oxygen release.&lt;/p&gt;
&lt;p&gt;Thanks to Peter for adding that long waiting feature to PDE!&lt;/p&gt;
&lt;h2&gt;@Service Annotation for Eclipse RCP&lt;/h2&gt;
&lt;p&gt;Also for RCP development there are some news with regards to OSGi services. The &lt;code&gt;@Service&lt;/code&gt; annotation, created by &lt;a href=&quot;https://tomsondev.bestsolution.at/&quot; target=&quot;_blank&quot;&gt;Tom Schindl&lt;/a&gt; for the &lt;a href=&quot;https://www.eclipse.org/efxclipse/index.html&quot; target=&quot;_blank&quot;&gt;e(fx)clipse project&lt;/a&gt;, has been ported to the Eclipse Platform (introduced &lt;a href=&quot;https://tomsondev.bestsolution.at/2014/12/15/eclipse-di-and-osgi-services-and-dynamics/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;When using the default Eclipse 4 injection mechanisms, the injection of OSGi services is limited to a unary cardinality. Given an OSGi service of type &lt;code&gt;StringInverter&lt;/code&gt; (see my previous tutorials) the injection can be done like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public class SamplePart {

    @Inject
    StringInverter inverter;

    @PostConstruct
    public void postConstruct(Composite parent) {
        ...
    }
}&lt;/pre&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public class SamplePart {

    @Inject
    @Optional
    StringInverter inverter;

    @PostConstruct
    public void postConstruct(Composite parent) {
        ...
    }
}&lt;/pre&gt;
&lt;p&gt;This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only a single service instance can get injected.&lt;/li&gt;
&lt;li&gt;If the cardinality is MANDATORY (no &lt;code&gt;@Optional&lt;/code&gt;), a service instance needs to be available, otherwise the injection fails with an exception.&lt;/li&gt;
&lt;li&gt;If the cardinality is OPTIONAL (&lt;code&gt;@Inject&lt;/code&gt; AND &lt;code&gt;@Optional&lt;/code&gt;) and no service is available at creation time, a new service will get injected when it becomes available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This behavior is similar to the DYNAMIC GREEDY policy for OSGi DS service references. But the default injection mechanism for OSGi services has several issues that are reported in &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=413287&quot; target=&quot;_blank&quot;&gt;Bug 413287&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a service is injected and a new service becomes available, the new service will be injected, regardless of his service ranking. So even if the new service has a lower ranking it will be injected. Compared with the OSGi service specification this is incorrect as the service with the highest ranking should be used, or, if the ranking is equal, the service that was registered first .&lt;/li&gt;
&lt;li&gt;If a service is injected and it becomes unavailable, there is no injection of a service with a lower service ranking. Instead &lt;code&gt;null&lt;/code&gt; will be injected, even if a valid service is still available.&lt;/li&gt;
&lt;li&gt;If a service implements multiple service interfaces, only the first service key is reset.&lt;/li&gt;
&lt;li&gt;If a service instance should be created per bundle or per requestor by using either a service factory or scope, there will be only one instance for every request, because the service is always requested via &lt;code&gt;BundleContext&lt;/code&gt; of one of the platform bundles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
I was able to provide a fix for the first three points. The last issue in the list regarding scoped services can not be solved for the default injection mechanism.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;@Service&lt;/code&gt; annotation was introduced to solve all these issues and additionally support the multiple cardinality (only MULTIPLE, not AT_LEAST_ONE).&lt;/p&gt;
&lt;p&gt;To use it simply add &lt;code&gt;@Service&lt;/code&gt; additionally to &lt;code&gt;@Inject&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public class SamplePart {

    @Inject
    @Service
    StringInverter inverter;

    @PostConstruct
    public void postConstruct(Composite parent) {
        ...
    }
}&lt;/pre&gt;
&lt;p&gt;The above snippet is similar to the &lt;em&gt;Field Strategy&lt;/em&gt; in OSGi DS. To get something similar to the &lt;em&gt;Event Strategy&lt;/em&gt; you would use method injection like in the following snippet:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public class SamplePart {

    StringInverter inverter;

    @Inject
    public void setInverter(@Service StringInverter inverter) {
        this.inverter = inverter;
    }
    @PostConstruct
    public void postConstruct(Composite parent) {
        ...
    }
}&lt;/pre&gt;
&lt;p&gt;With using the &lt;code&gt;@Service&lt;/code&gt; annotation on a unary reference, you get a behavior similar to the DYNAMIC GREEDY policy for OSGi DS service references, which is actually the same as with the default injection mechanism after my fix is applied. Additionally the usage of a service factory or scoped services is supported by using the &lt;code&gt;@Service&lt;/code&gt; annotation, as the &lt;code&gt;BundleContext&lt;/code&gt; of the requestor is used to retrieve the service.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/span&gt;&lt;br /&gt;
While writing this blog post there is an issue with the OPTIONAL cardinality in case no service is available at creation time. If a new service becomes available, it is not injected automatically. I created &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513563&quot; target=&quot;_blank&quot;&gt;Bug 513563&lt;/a&gt; for this and provided a fix for both, the Eclipse Platform and e(fx)clipse.&lt;/p&gt;
&lt;p&gt;One interesting feature of the &lt;code&gt;@Service&lt;/code&gt; annotation is the support of the MULTIPLE cardinality. This way it is possible to get all OSGi services of a specific type injected, in the same order as in the OSGi service registry. For this simply use the injection on a list of the desired service type.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public class SamplePart {

    @Inject
    @Service
    List&amp;lt;StringInverter&amp;gt; inverter;

    @PostConstruct
    public void postConstruct(Composite parent) {
        ...
    }
}&lt;/pre&gt;
&lt;p&gt;Another nice feature (and also pretty new for e(fx)clipse) is the filter support. Tom introduced this &lt;a href=&quot;https://tomsondev.bestsolution.at/2017/01/12/making-service-annotation-even-cleverer/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. e(fx)clipse supports static as well as dynamic filters that can change at runtime. Because of dependency issues only the support for static filters was ported to the Eclipse Platform. Via &lt;em&gt;filterExpression&lt;/em&gt; type element it is possible to specify an LDAP filter to constrain the set of services that should be injected. This is similar to the &lt;em&gt;target&lt;/em&gt; type element of OSGi DS service references.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot;&gt;public class SamplePart {

    // only get services injected that have specified the
    // value &quot;online&quot; for the component property &quot;connection&quot;
    @Inject
    @Service(filterExpression=&quot;(connection=online)&quot;)
    List&amp;lt;StringInverter&amp;gt; inverter;

    @PostConstruct
    public void postConstruct(Composite parent) {
        ...
    }
}&lt;/pre&gt;
&lt;p&gt;With the &lt;code&gt;@Service&lt;/code&gt; annotation the Eclipse injection for OSGi services aligns better with OSGi DS. And with the introduction of DS 1.3 to Equinox the usage of OSGi services for Eclipse RCP applications should become even more a common pattern than it was before with using the Equinox only &lt;em&gt;Extension Points&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For me the news on OSGi DS in the Eclipse Platform are the most interesting ones in the Oxygen release. But of course not the only ones. So I encourage everyone to try out the newest Oxygen milestone releases to get the best out of it for everyone!&lt;/p&gt;</description>
	<pubDate>Wed, 15 Mar 2017 07:57:39 +0000</pubDate>
</item>
<item>
	<title>Philip Wenig: Eclipse Hackathon Hamburg – March 2017</title>
	<guid isPermaLink="false">http://openchrom.wordpress.com/?p=477</guid>
	<link>https://openchrom.wordpress.com/2017/03/14/eclipse-hackathon-hamburg-march-2017/</link>
	<description>&lt;p&gt;&lt;strong&gt;Eclipse Hackathons&lt;/strong&gt; are a great place to meet other &lt;strong&gt;Eclipse developers&lt;/strong&gt;!&lt;br /&gt;
&lt;a href=&quot;https://wiki.eclipse.org/Hackathon_Hamburg_2017_Mar&quot; target=&quot;_blank&quot;&gt;https://wiki.eclipse.org/Hackathon_Hamburg_2017_Mar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/03/img_20170310_184629.jpg&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-478&quot; height=&quot;405&quot; src=&quot;https://openchrom.files.wordpress.com/2017/03/img_20170310_184629.jpg?w=640&amp;amp;h=405&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://openchrom.files.wordpress.com/2017/03/img_20170310_203044.jpg&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-large wp-image-479&quot; height=&quot;331&quot; src=&quot;https://openchrom.files.wordpress.com/2017/03/img_20170310_203044.jpg?w=640&amp;amp;h=331&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.eclipse.org/Hackathon_Hamburg&quot; target=&quot;_blank&quot;&gt;https://wiki.eclipse.org/Hackathon_Hamburg&lt;/a&gt;&lt;/p&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=openchrom.wordpress.com&amp;amp;blog=25006439&amp;amp;post=477&amp;amp;subd=openchrom&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 14 Mar 2017 07:34:59 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: A Thought on a Componentized Future of IDEs.</title>
	<guid isPermaLink="false">http://cdtdoug.ca/?p=838</guid>
	<link>https://cdtdoug.ca/2017/03/13/a-thought-on-a-componentized-future-of-ides/</link>
	<description>&lt;p&gt;If you haven’t heard of the Language Server Protocol and the language servers they inspire, take a Google around. There’s something very interesting happening here. &lt;span style=&quot;font-size: 1rem;&quot;&gt;The direction the LSP starts, and we’ve had discussions around a Debugger Server Protocol as well, opens the door to the componentization of IDEs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 1rem;&quot;&gt; And this is quite different than the plug-in model we have with Eclipse. Instead of creating a UI platform and having plug-ins add menu items, preference pages, editors, views, etc., build your IDE from the other direction. Take a collection of components that don’t have UI, that implement IMHO the hard things about IDEs, language parsers, build systems, debugger frameworks, and wrap them with your own custom purpose IDE “shell”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Eclipse suffers to a significant extent the “Tragedy of the Commons”. There is a large amount of inconsistency between plug-ins that do similar things but do it in different ways. Why is there a Perspective for every language? Because each language plug-in developer has different ideas on how the “Code” perspective should be laid out. And maybe, for their users, they’re right.&lt;/p&gt;
&lt;p&gt;An alternative reality has language plug-in providers provide APIs that allow IDE builders to provide their own user experiences. Yes, that would be a lot more work and probably not practical. But as the doors open to a new generation of IDEs, language plug-in providers need to think about how they’d plug into many of them. It’s not clear which one will be the winner or even if there will be a winner.&lt;/p&gt;
&lt;p&gt;It’s a brave new world. And we have a way to go before we figure it all out. But it’s a great time to think outside the box and see what sticks to the walls, or in my case, what I don’t erase from my whiteboard ;).&lt;/p&gt;</description>
	<pubDate>Mon, 13 Mar 2017 15:56:08 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Data-driven Apps made easy with Vert.x 3.4.0 and headless CMS Gentics Mesh</title>
	<guid isPermaLink="true">http://vertx.io/blog/data-driven-apps-made-easy-with-vert-x-3-4-0-and-headless-cms-gentics-mesh</guid>
	<link>http://vertx.io/blog/data-driven-apps-made-easy-with-vert-x-3-4-0-and-headless-cms-gentics-mesh</link>
	<description>&lt;article&gt;&lt;p&gt;In this article, I would like to share why Vert.x is not only a robust foundation for the &lt;a href=&quot;http://getmesh.io/&quot;&gt;headless Content Management System Gentics Mesh&lt;/a&gt; but also how the recent release 3.4.0 can be used to build a template-based web server with Gentics Mesh and handlebars.&lt;/p&gt;
&lt;p&gt;A headless CMS focuses on delivering your content through an API and allows editors creating and managing that data through a web-based interface. Unlike a traditional CMS, it does not provide a specifically rendered output. The frontend part (the head) is literally cut off, allowing developers create websites, apps, or any other data-driven projects with their favourite technologies.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vertx.io/blog/vert-x-3-4-0-is-released/&quot;&gt;Vert.x 3.4.0&lt;/a&gt; has just been released and it comes with a bunch of new features and bug fixes. I am especially excited about a small enhancement that changes the way in which the handlebars template engine handle their context data. Previously it was not possible to resolve Vert.x ‘s JsonObjects within the render context. With my enhancement &lt;a href=&quot;https://github.com/vert-x3/vertx-web/pull/509&quot;&gt;#509&lt;/a&gt; - released in Vert.x 3.4.0 - it is now possible to access nested data from these objects within your templates. Previously this would have required flattening out each object and resolving it individually, which would have been very cumbersome.&lt;/p&gt;
&lt;p&gt;I’m going to demonstrate this enhancement by showing how to build a product catalogue using Vert.x together with handlebars templates to render and serve the web pages. The product data is managed, stored and delivered by the CMS server as source for JSON data.&lt;/p&gt;
&lt;h2 id=&quot;clone-import-download-start-set-up-your-product-catalogue-website-quickly&quot;&gt;Clone, Import, Download, Start - Set up your product catalogue website quickly&lt;/h2&gt;
&lt;p&gt;Let’s quickly set up everything you need to run the website before I walk you through the code.&lt;/p&gt;
&lt;h3 id=&quot;1-clone-get-the-full-vert-x-with-gentics-mesh-example-from-github-https-github-com-gentics-mesh-vertx-example-&quot;&gt;1.  Clone - &lt;a href=&quot;https://github.com/gentics/mesh-vertx-example&quot;&gt;Get the full Vert.x with Gentics Mesh example from Github&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fire up your terminal and clone the example application to the directory of your choice.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;git clone git@github.com:gentics/mesh-vertx-example.git&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;2-import-the-maven-project-in-your-favourite-ide&quot;&gt;2. Import - The maven project in your favourite IDE&lt;/h3&gt;
&lt;p&gt;The application is set up as a maven project and can be imported in Eclipse IDE via File → Import → Existing Maven Project&lt;/p&gt;
&lt;h3 id=&quot;3-download-get-the-headless-cms-gentics-mesh&quot;&gt;3. Download  -  Get the headless CMS Gentics Mesh&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://getmesh.io/Download&quot;&gt;Download the latest version of Gentics Mesh&lt;/a&gt; and start the CMS with this one-liner&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;java -jar mesh-demo-&lt;span class=&quot;hljs-number&quot;&gt;0.6&lt;/span&gt;.xx.jar&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the current example we are going to use the read-only user credentials (&lt;em&gt;webclient:webclient&lt;/em&gt;).
If you want to play around with the demo data you can point your browser to &lt;a href=&quot;http://localhost:8080/mesh-ui/&quot;&gt;http://localhost:8080/mesh-ui/&lt;/a&gt; to reach the Gentics Mesh user interface and use one of the &lt;a href=&quot;http://getmesh.io/docs/beta/getting-started.html#_startup&quot;&gt;available demo credentials&lt;/a&gt; to login.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;http://vertx.io/assets/blog/vertx-mesh/mesh-ui.jpg&quot; title=&quot;Gentics Mesh User Interface&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-start-the-application-and-browse-the-product-catalogue&quot;&gt;4. Start - The application and browse the product catalogue&lt;/h3&gt;
&lt;p&gt;You can start the Vert.x web server by running Server.java.&lt;/p&gt;
&lt;p&gt;That’s it - now you can access the product catalogue website in your browser: &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-vert-x-is-a-good-fit-for-gentics-mesh&quot;&gt;Why Vert.x is a good fit for Gentics Mesh&lt;/h2&gt;
&lt;p&gt;Before digging into the example, let me share a few thoughts on Vert.x and Gentics Mesh in combination. In this example Vert.x is part of the frontend stack in delivering the product catalogue website. But it might also be of interest to you that Vert.x is also used at the very heart of Gentics Mesh itself. The Gentics Mesh &lt;a href=&quot;http://getmesh.io/docs/beta/raml/&quot;&gt;REST API endpoints&lt;/a&gt; are built on top of Vert.x as a core component.&lt;/p&gt;
&lt;p&gt;The great thing about Vert.x is that there are a lot of default implementations for various tasks such as authentication, database integration, monitoring and clustering. It is possible to use one or more features and omit the rest and thus your application remains lightweight.&lt;/p&gt;
&lt;h2 id=&quot;curious-about-the-code-&quot;&gt;Curious about the code?&lt;/h2&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://github.com/gentics/mesh-vertx-example&quot;&gt;https://github.com/gentics/mesh-vertx-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that everything is up and running let’s have a detailed look at the code.&lt;/p&gt;
&lt;p&gt;A typical deployment unit for Vert.x is a &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_verticles&quot;&gt;verticle&lt;/a&gt;. In our case we use the verticle to bundle our code and run the web server within it. Once deployed, Vert.x will run the verticle and start the HTTP server code.&lt;/p&gt;


&lt;p&gt;The &lt;a href=&quot;http://getmesh.io/docs/beta/#_java_rest_client&quot;&gt;Gentics Mesh REST client&lt;/a&gt; is used to communicate with the Gentics Mesh server. The &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x web library&lt;/a&gt; is used to set up our &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts&quot;&gt;HTTP Router&lt;/a&gt;. As with other routing frameworks like &lt;em&gt;Silex&lt;/em&gt; and &lt;em&gt;Express&lt;/em&gt;, the router can be used to create routes for inbound HTTP requests. In our case we only need two routes. The main route which accepts the request will utilize the &lt;a href=&quot;http://getmesh.io/docs/beta/#_webroot&quot;&gt;Gentics Mesh Webroot API Endpoint&lt;/a&gt; which is able to resolve content by a provided path. It will examine the response and add fields to the routing context.&lt;/p&gt;
&lt;p&gt;The other route is chained and will take the previously prepared routing context and render the desired template using the &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_templates&quot;&gt;handlebars template handler&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;First we can handle various special requests path such as “/“ for the welcome page. Or the typical favicon.ico request. Other requests are passed to the Webroot API handler method.&lt;/p&gt;


&lt;p&gt;Once the path has been resolved to a &lt;em&gt;WebRootResponse&lt;/em&gt; we can examine that data and determine whether it is a binary response or a JSON response. Binary responses may occur if the requested resource represents an image or any other binary data. Resolved binary contents are directly passed through to the client and the handlebars route is not invoked.&lt;/p&gt;
&lt;p&gt;Examples&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; → welcome.hbs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/Automobiles&quot;&gt;http://localhost:3000/Automobiles&lt;/a&gt; → category → productList.hbs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/Automobiles/Tesla%20Roadster&quot;&gt;http://localhost:3000/Automobiles/Tesla Roadster&lt;/a&gt; → vehicle → productDetail.hbs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/Vehicle%20Images/tesla-roadster.jpg&quot;&gt;http://localhost:3000/Vehicle Images/tesla-roadster.jpg&lt;/a&gt; → binary passthru&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JSON responses on the other hand are examined to determine the type of node which was located. A typical node response contains information about the schema used by the node. This will effectively determine the type of the located content (e.g.: category, vehicle).&lt;/p&gt;


&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;http://vertx.io/assets/blog/vertx-mesh/mesh-schemas.jpg&quot; title=&quot;Mesh Schemas&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The demo application serves different pages which correspond to the identified type.
Take a look at the template sources within &lt;em&gt;src/main/resources/templates/&lt;/em&gt; if you are interested in the &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebars syntax&lt;/a&gt;. 
The templates in the example should cover most common cases.   &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;img-responsive center-block&quot; src=&quot;http://vertx.io/assets/blog/vertx-mesh/mesh-vertx-templates.jpg&quot; title=&quot;Handlebars Template Overview&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The Mesh REST Client library internally makes use of the &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_creating_an_http_client&quot;&gt;Vert.x core HTTP client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava&quot;&gt;RxJava&lt;/a&gt; is being used to handle these async requests. This way we can combine all asynchronously requested Gentics Mesh resources (breadcrumb, list of products) and add the loaded data into the routing context.&lt;/p&gt;
&lt;p&gt;The Vert.x example server loads JSON content from the Gentics Mesh server. The &lt;em&gt;JsonObject&lt;/em&gt; is placed in the &lt;a href=&quot;https://github.com/jknack/handlebars.java&quot;&gt;handlebars&lt;/a&gt; render context and the template can access all nested fields within.&lt;/p&gt;
&lt;p&gt;This way it is possible to resolve any field within the handlebars template.&lt;/p&gt;


&lt;p&gt;That’s it! Finally, we can invoke mvn clean package in order to package our webserver. The &lt;a href=&quot;https://maven.apache.org/plugins/maven-shade-plugin/&quot;&gt;maven-shade-plugin&lt;/a&gt; will bundle everything and create an executable jar.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next-&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;Future releases of Gentics Mesh will refine the Mesh REST Client API and provide a &lt;a href=&quot;http://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; which will reduce the JSON overhead. Using GraphQL will also reduce the amount of requests which need to be issued.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you have any futher questions or feedback don’t hesitate to send me a tweet to &lt;a href=&quot;https://twitter.com/Jotschi/&quot;&gt;@Jotschi&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/genticsmesh/&quot;&gt;@genticsmesh&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Run Eclipse IDE on One Version of Java, but Target Another</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4746</guid>
	<link>https://waynebeaton.wordpress.com/2017/03/10/run-eclipse-ide-on-one-version-of-java-but-target-another/</link>
	<description>&lt;p&gt;The &lt;em&gt;Eclipse IDE for Java™ Developers&lt;/em&gt; (and the other &lt;em&gt;Java developer&lt;/em&gt; variants) is itself a Java application that’s used to build Java applications. That relationship can be a bit weird to wrap your brain around.&lt;/p&gt;
&lt;p&gt;Written almost entirely in Java, the Eclipse IDE requires a &lt;em&gt;Java Runtime Environment (JRE)&lt;/em&gt; to run. A JRE provides just the runtime platform: it doesn’t include the source code and Javadoc for any of the base Java libraries, or any of the development tools that are included in the Java Development Kit (JDK). An Eclipse IDE runs just fine on a JRE.&lt;/p&gt;
&lt;p&gt;If you’re building Java applications, however, you really need to have access to a JDK. By default, an Eclipse IDE will configure itself to build applications against the JRE that it was launched on. If that JRE is part of a JDK, then you’ll get access to all the goodies that you need to get useful content assist, documentation, debugging support, etc. If the runtime platform is just a JRE, then a lot of that valuable goodness will be missing (but compiling still works because the &lt;em&gt;Java development tools&lt;/em&gt; include the &lt;em&gt;Eclipse Compiler for Java&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Here’s where it gets a bit weird. You can run an Eclipse IDE on a JRE from one version of Java and build applications that target one or more different versions of Java. You can, for example, run your Eclipse IDE on Java 8, but use it to build applications based on basically any earlier version of Java. You can select the default Java version for your workspace in the preferences (on the &lt;em&gt;Java &amp;gt; Compiler&lt;/em&gt; page), or individually in the properties for each Java Project (preferred).&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_4748&quot; style=&quot;width: 555px;&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;size-full wp-image-4748&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/03/screenshot-from-2017-03-10-13-18-42.png?w=640&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;JDK Compliance settings in the Preferences (&lt;em&gt;Java &amp;gt; Compiler&lt;/em&gt;)&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;In order to actually build applications on a different version of Java, you need to connect your Eclipse IDE with the corresponding JDK. To do this, first install the JDK, and then tell the Eclipse IDE where to find it via the &lt;em&gt;Java &amp;gt; Installed JREs&lt;/em&gt; page in the workspace preferences. With additional JDKs installed, you can configure individual projects to use specific versions of the compiler and runtime.&lt;/p&gt;
&lt;p&gt;All of this is a long way of saying that you can &lt;a href=&quot;https://waynebeaton.wordpress.com/2017/03/02/eclipse-ide-oxygen-edition-and-java-9/&quot;&gt;configure your Eclipse IDE, Oxygen Edition milestone build to run on a &lt;em&gt;Java 9 JRE&lt;/em&gt;&lt;/a&gt;, (download a JDK from the &lt;a href=&quot;https://jdk9.java.net/jigsaw/&quot;&gt;JDK 9 Early Access&lt;/a&gt; site) but use it to build applications that target earlier versions of Java (i.e. keep doing your day job). Even doing just this and providing feedback will be very helpful to the Eclipse projects involved in the Eclipse IDE. If you actually want to build Java 9 applications, you’ll need to install the &lt;a href=&quot;https://marketplace.eclipse.org/content/java-9-support-beta-oxygen&quot;&gt;Java 9 Support (BETA) for Oxygen&lt;/a&gt; from the Eclipse Marketplace and provide &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=JDT&quot;&gt;feedback to the team&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that the JDT product in the Eclipse Foundation’s Bugzilla instance is specifically for reporting bugs that are directly related to the Java development tools. Use the &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=EGit&quot;&gt;EGit product&lt;/a&gt; to report issues with the Git integration, the &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=m2e&quot;&gt;m2e product&lt;/a&gt; to report issues with the Maven integration, the &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Buildship&quot;&gt;Buildship product&lt;/a&gt; to report issues with the Gradle integration, the &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Platform&quot;&gt;Platform product&lt;/a&gt; for issues with regard to the basic IDE framework, the &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Web%20Tools&quot;&gt;Web Tools product&lt;/a&gt; for issues with enterprise Java and web development, or the &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Platform&quot;&gt;EPP (Eclipse Packaging Project) product&lt;/a&gt; if you’re not sure.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Many committers from the various Eclipse projects that contribute to the Eclipse IDE, including at least a couple of committers from the Java development tools project in particular, will be at &lt;a href=&quot;http://devoxx.us&quot;&gt;Devoxx US&lt;/a&gt;. If you want to learn more about Java 9 support in the Eclipse IDE, you’ll be able to find them at the Eclipse Foundation’s booth (or we’ll be able to help you find them).&lt;/p&gt;
&lt;p&gt;I’ll also be doing a demonstration of &lt;em&gt;Test First Java Development using the Eclipse IDE&lt;/em&gt; at the booth. Come by and see if I can keep myself within the twenty minute limit…&lt;/p&gt;
&lt;p&gt;If you want to learn more about the great features available in the Eclipse IDE, follow &lt;a href=&quot;https://twitter.com/EclipseJavaIDE&quot;&gt;@EclipseJavaIDE&lt;/a&gt; on Twitter (&lt;a href=&quot;https://twitter.com/waynebeaton&quot;&gt;follow me&lt;/a&gt; while you’re at it).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devoxx.us/&quot;&gt;&lt;img alt=&quot;devoxx_black_transparent400&quot; class=&quot;aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/02/devoxx_black_transparent400.png?w=300&amp;amp;h=104&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4746/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4746/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4746&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 10 Mar 2017 19:05:00 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus-RT Beta?!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=548</guid>
	<link>https://papyrusuml.wordpress.com/2017/03/09/papyrus-rt-beta/</link>
	<description>&lt;p&gt;I just heard, through the minion grapevine, that there will be an official, managed beta for Papyrus for Real Time! Just like the ones for the big-boys commercial tools! I’m so proud of Me-RT!&lt;/p&gt;
&lt;p&gt;The beta will be based on Papyrus-RT v0.9, which is planned for release on March 23 (aligned with Eclipse Neon.3), as reported in &lt;a href=&quot;https://papyrusuml.wordpress.com/2017/03/02/papyrus-rt-train-roadmap/&quot;&gt;Papyrus-RT Roadmap: follow the train&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is exciting! Users will be able to play with me, to give their opinions, to suggest improvements, and, basically, to help me get better!&lt;/p&gt;
&lt;p&gt;I will get my product management/development minions to tell me more…and I will, of course, let you know!&lt;/p&gt;
&lt;p&gt;Things are getting more and more interesting…&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/uncategorized/&quot;&gt;Uncategorized&lt;/a&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/548/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/548/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=548&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 09 Mar 2017 18:35:39 +0000</pubDate>
</item>

</channel>
</rss>
